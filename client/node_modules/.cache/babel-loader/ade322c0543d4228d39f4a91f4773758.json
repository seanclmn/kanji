{"ast":null,"code":"/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nvar SUPPORTED_LOCALE = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\"\n    }\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\"\n    }\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      i̇: \"\\u0049\",\n      j̇: \"\\u004A\",\n      į̇: \"\\u012E\",\n      i̇̀: \"\\u00CC\",\n      i̇́: \"\\u00CD\",\n      i̇̃: \"\\u0128\"\n    }\n  }\n};\n/**\n * Localized upper case.\n */\n\nexport function localeUpperCase(str, locale) {\n  var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return upperCase(str.replace(lang.regexp, function (m) {\n    return lang.map[m];\n  }));\n  return upperCase(str);\n}\n/**\n * Upper case as a function.\n */\n\nexport function upperCase(str) {\n  return str.toUpperCase();\n}","map":{"version":3,"mappings":"AAQA;;;AAGA,IAAMA,gBAAgB,GAA2B;EAC/CC,EAAE,EAAE;IACFC,MAAM,EAAE,WADN;IAEFC,GAAG,EAAE;MACHC,CAAC,EAAE;IADA;EAFH,CAD2C;EAO/CC,EAAE,EAAE;IACFH,MAAM,EAAE,WADN;IAEFC,GAAG,EAAE;MACHC,CAAC,EAAE;IADA;EAFH,CAP2C;EAa/CE,EAAE,EAAE;IACFJ,MAAM,EAAE,8DADN;IAEFC,GAAG,EAAE;MACHI,EAAE,EAAE,QADD;MAEHC,EAAE,EAAE,QAFD;MAGHC,EAAE,EAAE,QAHD;MAIHC,GAAG,EAAE,QAJF;MAKHC,GAAG,EAAE,QALF;MAMHC,GAAG,EAAE;IANF;EAFH;AAb2C,CAAjD;AA0BA;;;;AAGA,OAAM,SAAUC,eAAV,CAA0BC,GAA1B,EAAuCC,MAAvC,EAAqD;EACzD,IAAMC,IAAI,GAAGhB,gBAAgB,CAACe,MAAM,CAACE,WAAP,EAAD,CAA7B;EACA,IAAID,IAAJ,EAAU,OAAOE,SAAS,CAACJ,GAAG,CAACK,OAAJ,CAAYH,IAAI,CAACd,MAAjB,EAAyB,UAACkB,CAAD,EAAE;IAAK,WAAI,CAACjB,GAAL,CAASiB,CAAT;EAAW,CAA3C,CAAD,CAAhB;EACV,OAAOF,SAAS,CAACJ,GAAD,CAAhB;AACD;AAED;;;;AAGA,OAAM,SAAUI,SAAV,CAAoBJ,GAApB,EAA+B;EACnC,OAAOA,GAAG,CAACO,WAAJ,EAAP;AACD","names":["SUPPORTED_LOCALE","tr","regexp","map","i","az","lt","i̇","j̇","į̇","i̇̀","i̇́","i̇̃","localeUpperCase","str","locale","lang","toLowerCase","upperCase","replace","m","toUpperCase"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/upper-case/src/index.ts"],"sourcesContent":["/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\",\n    },\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\",\n    },\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      i̇: \"\\u0049\",\n      j̇: \"\\u004A\",\n      į̇: \"\\u012E\",\n      i̇̀: \"\\u00CC\",\n      i̇́: \"\\u00CD\",\n      i̇̃: \"\\u0128\",\n    },\n  },\n};\n\n/**\n * Localized upper case.\n */\nexport function localeUpperCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return upperCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return upperCase(str);\n}\n\n/**\n * Upper case as a function.\n */\nexport function upperCase(str: string) {\n  return str.toUpperCase();\n}\n"]},"metadata":{},"sourceType":"module"}