{"ast":null,"code":"var _jsxFileName = \"/Users/seancoleman/Projects/kanji/src/components/ProgressCircle.tsx\";\n// @ts-nocheck\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shadeColor(color, percent) {\n  let R = parseInt(color.substring(1, 3), 16);\n  let G = parseInt(color.substring(3, 5), 16);\n  let B = parseInt(color.substring(5, 7), 16);\n  R = parseInt(`${R * (100 + percent) / 100}`, 10);\n  G = parseInt(`${G * (100 + percent) / 100}`, 10);\n  B = parseInt(`${B * (100 + percent) / 100}`, 10);\n  R = R < 255 ? R : 255;\n  G = G < 255 ? G : 255;\n  B = B < 255 ? B : 255;\n  const RR = R.toString(16).length === 1 ? `0${R.toString(16)}` : R.toString(16);\n  const GG = G.toString(16).length === 1 ? `0${G.toString(16)}` : G.toString(16);\n  const BB = B.toString(16).length === 1 ? `0${B.toString(16)}` : B.toString(16);\n  return `#${RR}${GG}${BB}`;\n}\n\nconst DEFAULT_RADIUS = 60;\nconst MAX_VALUE = 10;\nconst Direction = {\n  CLOCKSWISE: -1,\n  ANTI_CLOCKWISE: 1\n};\n\nconst ProgressCircle = _ref => {\n  let {\n    maxValue,\n    selectedValue,\n    radius,\n    strokeWidth,\n    label,\n    activeStrokeColor,\n    inactiveStrokeColor,\n    backgroundColor,\n    textColor,\n    labelFontSize,\n    valueFontSize,\n    withGradient,\n    anticlockwise,\n    initialAngularDisplacement\n  } = _ref;\n\n  // ----  PIE calculation funciton --------\n  const generatePie = value => {\n    const x = radius - Math.cos(2 * Math.PI / (100 / value)) * radius;\n    const y = radius + Math.sin(2 * Math.PI / (100 / value)) * radius;\n    const long = value <= 50 ? 0 : 1;\n    const d = `M${radius} ${radius} L${radius} ${0} A${radius} ${radius} 0 ${long} 1 ${y} ${x} Z`;\n    return d;\n  }; // ----  PIE Area calculation  --------\n\n\n  const calculatePieValue = numberOfBars => {\n    const angle = 360 / numberOfBars;\n    const pieValue = Math.floor(angle / 4);\n    return pieValue < 1 ? 1 : Math.floor(angle / 4);\n  }; // ----  PIE render funciton --------\n\n\n  const renderPie = i => {\n    const DIRECTION = anticlockwise ? Direction.ANTI_CLOCKWISE : Direction.CLOCKSWISE; // Rotation Calculation\n\n    const primaryRotationAngle = (maxValue - 1) * (360 / maxValue);\n    const rotationAngle = DIRECTION * initialAngularDisplacement + -1 * DIRECTION * primaryRotationAngle + i * DIRECTION * primaryRotationAngle;\n    const rotationTransformation = `rotate(${rotationAngle}, ${radius}, ${radius})`;\n    const pieValue = calculatePieValue(maxValue);\n    const dValue = generatePie(pieValue);\n    const activeColor = withGradient ? shadeColor(activeStrokeColor, (i + 1) * maxValue / 50) : activeStrokeColor;\n    const fillColor = selectedValue > 0 && i <= selectedValue ? activeColor : inactiveStrokeColor;\n    return /*#__PURE__*/_jsxDEV(\"path\", {\n      style: {\n        opacity: i === 0 ? 0 : 1\n      },\n      d: dValue,\n      fill: fillColor,\n      transform: rotationTransformation\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }; // ----  Creates a circle by combining the Pie(s) --------\n\n\n  const renderOuterCircle = () => [...Array(maxValue + 1)].map((e, i) => renderPie(i));\n\n  const labelView = /*#__PURE__*/_jsxDEV(\"text\", {\n    fill: textColor,\n    fontSize: labelFontSize,\n    x: radius,\n    y: radius + labelFontSize,\n    textAnchor: \"middle\",\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n\n  const textValueY = label ? radius : radius + valueFontSize / 3; // --------  MAIN Render --------\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: radius * 2,\n    height: radius * 2,\n    children: [renderOuterCircle(), /*#__PURE__*/_jsxDEV(\"circle\", {\n      r: radius - strokeWidth,\n      cx: radius,\n      cy: radius,\n      fill: backgroundColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      fill: textColor,\n      fontSize: valueFontSize,\n      fontWeight: \"bold\",\n      x: radius,\n      y: textValueY,\n      textAnchor: \"middle\",\n      children: selectedValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), !!label.length && labelView]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ProgressCircle;\nProgressCircle.defaultProps = {\n  maxValue: MAX_VALUE,\n  selectedValue: 0,\n  radius: DEFAULT_RADIUS,\n  strokeWidth: DEFAULT_RADIUS / 10,\n  label: '',\n  activeStrokeColor: '#05a168',\n  inactiveStrokeColor: '#ddd',\n  backgroundColor: '#fff',\n  textColor: '#000',\n  labelFontSize: Math.floor(DEFAULT_RADIUS / 3),\n  valueFontSize: Math.floor(DEFAULT_RADIUS / 2.5),\n  withGradient: false,\n  anticlockwise: false,\n  initialAngularDisplacement: 0\n};\nexport default ProgressCircle;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressCircle\");","map":{"version":3,"names":["React","shadeColor","color","percent","R","parseInt","substring","G","B","RR","toString","length","GG","BB","DEFAULT_RADIUS","MAX_VALUE","Direction","CLOCKSWISE","ANTI_CLOCKWISE","ProgressCircle","maxValue","selectedValue","radius","strokeWidth","label","activeStrokeColor","inactiveStrokeColor","backgroundColor","textColor","labelFontSize","valueFontSize","withGradient","anticlockwise","initialAngularDisplacement","generatePie","value","x","Math","cos","PI","y","sin","long","d","calculatePieValue","numberOfBars","angle","pieValue","floor","renderPie","i","DIRECTION","primaryRotationAngle","rotationAngle","rotationTransformation","dValue","activeColor","fillColor","opacity","renderOuterCircle","Array","map","e","labelView","textValueY","defaultProps"],"sources":["/Users/seancoleman/Projects/kanji/src/components/ProgressCircle.tsx"],"sourcesContent":["// @ts-nocheck\nimport React from 'react';\n\nfunction shadeColor(color, percent) {\n    let R = parseInt(color.substring(1, 3), 16);\n    let G = parseInt(color.substring(3, 5), 16);\n    let B = parseInt(color.substring(5, 7), 16);\n\n    R = parseInt(`${(R * (100 + percent)) / 100}`, 10);\n    G = parseInt(`${(G * (100 + percent)) / 100}`, 10);\n    B = parseInt(`${(B * (100 + percent)) / 100}`, 10);\n\n    R = R < 255 ? R : 255;\n    G = G < 255 ? G : 255;\n    B = B < 255 ? B : 255;\n\n    const RR = R.toString(16).length === 1 ? `0${ R.toString(16)}` : R.toString(16);\n    const GG = G.toString(16).length === 1 ? `0${ G.toString(16)}` : G.toString(16);\n    const BB = B.toString(16).length === 1 ? `0${ B.toString(16)}` : B.toString(16);\n\n    return `#${ RR }${GG }${BB}`;\n}\n\nconst DEFAULT_RADIUS = 60;\nconst MAX_VALUE = 10;\n\nconst Direction = {\n    CLOCKSWISE: -1,\n    ANTI_CLOCKWISE: 1,\n};\n\ntype Props = {\n    maxValue?: number,\n    selectedValue?: number,\n    radius?: number,\n    strokeWidth?: number,\n    label?: string,\n    activeStrokeColor?: string,\n    inactiveStrokeColor?: string,\n    labelFontSize?: number,\n    valueFontSize?: number,\n    withGradient?: boolean,\n    anticlockwise?: boolean,\n    initialAngularDisplacement?: number,\n    backgroundColor?: string,\n    textColor?: string,\n};\n\nconst ProgressCircle = ({\n    maxValue,\n    selectedValue,\n    radius,\n    strokeWidth,\n    label,\n    activeStrokeColor,\n    inactiveStrokeColor,\n    backgroundColor,\n    textColor,\n    labelFontSize,\n    valueFontSize,\n    withGradient,\n    anticlockwise,\n    initialAngularDisplacement,\n}:Props) => {\n// ----  PIE calculation funciton --------\n    const generatePie = (value) => {\n        const x = radius - Math.cos((2 * Math.PI) / (100 / value)) * radius;\n        const y = radius + Math.sin((2 * Math.PI) / (100 / value)) * radius;\n        const long = value <= 50 ? 0 : 1;\n        const d = `M${radius} ${radius} L${radius} ${0} A${radius} ${radius} 0 ${long} 1 ${y} ${x} Z`;\n\n        return d;\n    };\n\n    // ----  PIE Area calculation  --------\n    const calculatePieValue = (numberOfBars) => {\n        const angle = 360 / numberOfBars;\n        const pieValue = Math.floor(angle / 4);\n        return pieValue < 1 ? 1 : Math.floor(angle / 4);\n    };\n\n    // ----  PIE render funciton --------\n    const renderPie = (i) => {\n        const DIRECTION = anticlockwise ? Direction.ANTI_CLOCKWISE : Direction.CLOCKSWISE;\n        // Rotation Calculation\n        const primaryRotationAngle = (maxValue - 1) * (360 / maxValue);\n        const rotationAngle = DIRECTION * initialAngularDisplacement\n    + -1 * DIRECTION * primaryRotationAngle\n    + i * DIRECTION * primaryRotationAngle;\n        const rotationTransformation = `rotate(${rotationAngle}, ${radius}, ${radius})`;\n\n        const pieValue = calculatePieValue(maxValue);\n        const dValue = generatePie(pieValue);\n\n        const activeColor = withGradient\n            ? shadeColor(activeStrokeColor, ((i + 1) * maxValue) / 50)\n            : activeStrokeColor;\n\n        const fillColor = selectedValue > 0 && i <= selectedValue\n            ? activeColor : inactiveStrokeColor;\n\n        return (\n            <path\n                style={{ opacity: i === 0 ? 0 : 1 }}\n                key={i}\n                d={dValue}\n                fill={fillColor}\n                transform={rotationTransformation}\n            />\n        );\n    };\n\n    // ----  Creates a circle by combining the Pie(s) --------\n    const renderOuterCircle = () => [...Array(maxValue + 1)].map((e, i) => renderPie(i));\n\n    const labelView = (\n        <text\n            fill={textColor}\n            fontSize={labelFontSize}\n            x={radius}\n            y={radius + labelFontSize}\n            textAnchor=\"middle\"\n        >\n            {label}\n        </text>\n    );\n\n    const textValueY = label ? radius : radius + valueFontSize / 3;\n\n    // --------  MAIN Render --------\n    return (\n        <svg width={radius * 2} height={radius * 2}>\n            {renderOuterCircle()}\n\n            {/* This is the overlay circle */}\n            <circle r={radius - strokeWidth} cx={radius} cy={radius} fill={backgroundColor} />\n\n            <text\n                fill={textColor}\n                fontSize={valueFontSize}\n                fontWeight=\"bold\"\n                x={radius}\n                y={textValueY}\n                textAnchor=\"middle\"\n            >\n                {selectedValue}\n            </text>\n            {!!label.length && labelView}\n        </svg>\n    );\n};\n\nProgressCircle.defaultProps = {\n    maxValue: MAX_VALUE,\n    selectedValue: 0,\n    radius: DEFAULT_RADIUS,\n    strokeWidth: DEFAULT_RADIUS / 10,\n    label: '',\n    activeStrokeColor: '#05a168',\n    inactiveStrokeColor: '#ddd',\n    backgroundColor: '#fff',\n    textColor: '#000',\n    labelFontSize: Math.floor(DEFAULT_RADIUS / 3),\n    valueFontSize: Math.floor(DEFAULT_RADIUS / 2.5),\n    withGradient: false,\n    anticlockwise: false,\n    initialAngularDisplacement: 0,\n};\n\nexport default ProgressCircle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}