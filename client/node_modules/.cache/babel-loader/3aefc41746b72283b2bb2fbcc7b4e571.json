{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEvent from './useEvent';\nimport useLayoutEffect from './useLayoutEffect';\nimport useState from './useState';\nvar Source;\n\n(function (Source) {\n  Source[Source[\"INNER\"] = 0] = \"INNER\";\n  Source[Source[\"PROP\"] = 1] = \"PROP\";\n})(Source || (Source = {}));\n\nvar useUpdateEffect = function useUpdateEffect(callback, deps) {\n  var firstMountRef = React.useRef(true);\n  useLayoutEffect(function () {\n    if (!firstMountRef.current) {\n      return callback();\n    }\n  }, deps); // We tell react that first mount has passed\n\n  useLayoutEffect(function () {\n    firstMountRef.current = false;\n    return function () {\n      firstMountRef.current = true;\n    };\n  }, []);\n};\n/** We only think `undefined` is empty */\n\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = useState(function () {\n    var finalValue = undefined;\n    var source;\n\n    if (hasValue(value)) {\n      finalValue = value;\n      source = Source.PROP;\n    } else if (hasValue(defaultValue)) {\n      finalValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n      source = Source.PROP;\n    } else {\n      finalValue = typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n      source = Source.INNER;\n    }\n\n    return [finalValue, source, finalValue];\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      mergedValue = _useState2[0],\n      setMergedValue = _useState2[1];\n\n  var chosenValue = hasValue(value) ? value : mergedValue[0];\n  var postMergedValue = postState ? postState(chosenValue) : chosenValue; // ======================= Sync =======================\n\n  useUpdateEffect(function () {\n    setMergedValue(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n          prevValue = _ref3[0];\n\n      return [value, Source.PROP, prevValue];\n    });\n  }, [value]); // ====================== Update ======================\n\n  var changeEventPrevRef = React.useRef();\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setMergedValue(function (prev) {\n      var _prev = _slicedToArray(prev, 3),\n          prevValue = _prev[0],\n          prevSource = _prev[1],\n          prevPrevValue = _prev[2];\n\n      var nextValue = typeof updater === 'function' ? updater(prevValue) : updater; // Do nothing if value not change\n\n      if (nextValue === prevValue) {\n        return prev;\n      } // Use prev prev value if is in a batch update to avoid missing data\n\n\n      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;\n      return [nextValue, Source.INNER, overridePrevValue];\n    }, ignoreDestroy);\n  }); // ====================== Change ======================\n\n  var onChangeFn = useEvent(onChange);\n  useLayoutEffect(function () {\n    var _mergedValue = _slicedToArray(mergedValue, 3),\n        current = _mergedValue[0],\n        source = _mergedValue[1],\n        prev = _mergedValue[2];\n\n    if (current !== prev && source === Source.INNER) {\n      onChangeFn(current, prev);\n      changeEventPrevRef.current = prev;\n    }\n  }, [mergedValue]);\n  return [postMergedValue, triggerChange];\n}","map":{"version":3,"names":["_slicedToArray","React","useEvent","useLayoutEffect","useState","Source","useUpdateEffect","callback","deps","firstMountRef","useRef","current","hasValue","value","undefined","useMergedState","defaultStateValue","option","_ref","defaultValue","onChange","postState","_useState","finalValue","source","PROP","INNER","_useState2","mergedValue","setMergedValue","chosenValue","postMergedValue","_ref2","_ref3","prevValue","changeEventPrevRef","triggerChange","updater","ignoreDestroy","prev","_prev","prevSource","prevPrevValue","nextValue","overridePrevValue","onChangeFn","_mergedValue"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/rc-util/es/hooks/useMergedState.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEvent from './useEvent';\nimport useLayoutEffect from './useLayoutEffect';\nimport useState from './useState';\nvar Source;\n\n(function (Source) {\n  Source[Source[\"INNER\"] = 0] = \"INNER\";\n  Source[Source[\"PROP\"] = 1] = \"PROP\";\n})(Source || (Source = {}));\n\nvar useUpdateEffect = function useUpdateEffect(callback, deps) {\n  var firstMountRef = React.useRef(true);\n  useLayoutEffect(function () {\n    if (!firstMountRef.current) {\n      return callback();\n    }\n  }, deps); // We tell react that first mount has passed\n\n  useLayoutEffect(function () {\n    firstMountRef.current = false;\n    return function () {\n      firstMountRef.current = true;\n    };\n  }, []);\n};\n/** We only think `undefined` is empty */\n\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = useState(function () {\n    var finalValue = undefined;\n    var source;\n\n    if (hasValue(value)) {\n      finalValue = value;\n      source = Source.PROP;\n    } else if (hasValue(defaultValue)) {\n      finalValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n      source = Source.PROP;\n    } else {\n      finalValue = typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n      source = Source.INNER;\n    }\n\n    return [finalValue, source, finalValue];\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      mergedValue = _useState2[0],\n      setMergedValue = _useState2[1];\n\n  var chosenValue = hasValue(value) ? value : mergedValue[0];\n  var postMergedValue = postState ? postState(chosenValue) : chosenValue; // ======================= Sync =======================\n\n  useUpdateEffect(function () {\n    setMergedValue(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n          prevValue = _ref3[0];\n\n      return [value, Source.PROP, prevValue];\n    });\n  }, [value]); // ====================== Update ======================\n\n  var changeEventPrevRef = React.useRef();\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setMergedValue(function (prev) {\n      var _prev = _slicedToArray(prev, 3),\n          prevValue = _prev[0],\n          prevSource = _prev[1],\n          prevPrevValue = _prev[2];\n\n      var nextValue = typeof updater === 'function' ? updater(prevValue) : updater; // Do nothing if value not change\n\n      if (nextValue === prevValue) {\n        return prev;\n      } // Use prev prev value if is in a batch update to avoid missing data\n\n\n      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;\n      return [nextValue, Source.INNER, overridePrevValue];\n    }, ignoreDestroy);\n  }); // ====================== Change ======================\n\n  var onChangeFn = useEvent(onChange);\n  useLayoutEffect(function () {\n    var _mergedValue = _slicedToArray(mergedValue, 3),\n        current = _mergedValue[0],\n        source = _mergedValue[1],\n        prev = _mergedValue[2];\n\n    if (current !== prev && source === Source.INNER) {\n      onChangeFn(current, prev);\n      changeEventPrevRef.current = prev;\n    }\n  }, [mergedValue]);\n  return [postMergedValue, triggerChange];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}