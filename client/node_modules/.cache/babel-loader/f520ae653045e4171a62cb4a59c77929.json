{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isRefObject(value) {\n  return value != null && typeof value !== \"function\";\n}\nexport function isRefCallback(value) {\n  return typeof value === \"function\";\n}\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\n\nexport function setRef(refTarget, ref) {\n  if (isRefObject(refTarget)) {\n    refTarget.current = ref;\n  } else if (isRefCallback(refTarget)) {\n    refTarget(ref);\n  }\n}\n/** @deprecated use mergeRefs() instead */\n\nexport function combineRefs(ref1, ref2) {\n  return mergeRefs(ref1, ref2);\n}\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\n\nexport function mergeRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  return function (value) {\n    refs.forEach(function (ref) {\n      setRef(ref, value);\n    });\n  };\n}\nexport function getRef(ref) {\n  var _a;\n\n  if (ref === null) {\n    return null;\n  }\n\n  return (_a = ref.current) !== null && _a !== void 0 ? _a : ref;\n}\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\n\nexport function refHandler(refTargetParent, refTargetKey, refProp) {\n  return function (ref) {\n    refTargetParent[refTargetKey] = ref;\n    setRef(refProp, ref);\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUA,WAAV,CAAyBC,KAAzB,EAA0D;EAC5D,OAAOA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,UAAzC;AACH;AAID,OAAM,SAAUC,aAAV,CAA2BD,KAA3B,EAA4D;EAC9D,OAAO,OAAOA,KAAP,KAAiB,UAAxB;AACH;AAED;;;;AAGA,OAAM,SAAUE,MAAV,CAAoBC,SAApB,EAA2DC,GAA3D,EAAwE;EAC1E,IAAIL,WAAW,CAAII,SAAJ,CAAf,EAA+B;IAC3BA,SAAS,CAACE,OAAV,GAAoBD,GAApB;EACH,CAFD,MAEO,IAAIH,aAAa,CAACE,SAAD,CAAjB,EAA8B;IACjCA,SAAS,CAACC,GAAD,CAAT;EACH;AACJ;AAED;;AACA,OAAM,SAAUE,WAAV,CAAyBC,IAAzB,EAAgDC,IAAhD,EAAqE;EACvE,OAAOC,SAAS,CAACF,IAAD,EAAOC,IAAP,CAAhB;AACH;AAED;;;;;AAIA,OAAM,SAAUC,SAAV,GAAmB;EAAI;;OAAA,yCAA8B;IAA9BC;;;EACzB,OAAO,iBAAK;IACRA,IAAI,CAACC,OAAL,CAAa,eAAG;MACZT,MAAM,CAACE,GAAD,EAAMJ,KAAN,CAAN;IACH,CAFD;EAGH,CAJD;AAKH;AAED,OAAM,SAAUY,MAAV,CAAoBR,GAApB,EAAiD;;;EACnD,IAAIA,GAAG,KAAK,IAAZ,EAAkB;IACd,OAAO,IAAP;EACH;;EAED,OAAO,MAACA,GAAqB,CAACC,OAAvB,MAA8B,IAA9B,IAA8BQ,aAA9B,GAA8BA,EAA9B,GAAmCT,GAA1C;AACH;AAED;;;;;;;AAMA,OAAM,SAAUU,UAAV,CACFC,eADE,EAEFC,YAFE,EAGFC,OAHE,EAGkC;EAEpC,OAAO,UAACb,GAAD,EAAc;IACjBW,eAAe,CAACC,YAAD,CAAf,GAAgCZ,GAAhC;IACAF,MAAM,CAACe,OAAD,EAAUb,GAAV,CAAN;EACH,CAHD;AAIH","names":["isRefObject","value","isRefCallback","setRef","refTarget","ref","current","combineRefs","ref1","ref2","mergeRefs","refs","forEach","getRef","_a","refHandler","refTargetParent","refTargetKey","refProp"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/common/refs.ts"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type IRef<T = HTMLElement> = IRefObject<T> | IRefCallback<T>;\n\n// compatible with React.Ref type in @types/react@^16\nexport interface IRefObject<T = HTMLElement> {\n    current: T | null;\n}\n\nexport function isRefObject<T>(value: IRef<T> | undefined | null): value is IRefObject<T> {\n    return value != null && typeof value !== \"function\";\n}\n\nexport type IRefCallback<T = HTMLElement> = (ref: T | null) => any;\n\nexport function isRefCallback<T>(value: IRef<T> | undefined | null): value is IRefCallback<T> {\n    return typeof value === \"function\";\n}\n\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\nexport function setRef<T>(refTarget: IRef<T> | undefined | null, ref: T | null): void {\n    if (isRefObject<T>(refTarget)) {\n        refTarget.current = ref;\n    } else if (isRefCallback(refTarget)) {\n        refTarget(ref);\n    }\n}\n\n/** @deprecated use mergeRefs() instead */\nexport function combineRefs<T>(ref1: IRefCallback<T>, ref2: IRefCallback<T>) {\n    return mergeRefs(ref1, ref2);\n}\n\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\nexport function mergeRefs<T>(...refs: Array<IRef<T> | null>): IRefCallback<T> {\n    return value => {\n        refs.forEach(ref => {\n            setRef(ref, value);\n        });\n    };\n}\n\nexport function getRef<T>(ref: T | IRefObject<T> | null): T | null {\n    if (ref === null) {\n        return null;\n    }\n\n    return (ref as IRefObject<T>).current ?? (ref as T);\n}\n\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\nexport function refHandler<T extends HTMLElement, K extends string>(\n    refTargetParent: { [k in K]: T | null },\n    refTargetKey: K,\n    refProp?: IRef<T> | undefined | null,\n): IRefCallback<T> {\n    return (ref: T | null) => {\n        refTargetParent[refTargetKey] = ref;\n        setRef(refProp, ref);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}