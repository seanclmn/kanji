{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return __spreadProps(__spreadValues({}, modifiers), {\n    key: freeKey\n  });\n}\n\nfunction isExactHotkey(hotkey, event) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey\n  } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (key && (pressedKey.toLowerCase() === key.toLowerCase() || event.code.replace(\"Key\", \"\").toLowerCase() === key.toLowerCase())) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getHotkeyMatcher(hotkey) {\n  return event => isExactHotkey(parseHotkey(hotkey), event);\n}\n\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    hotkeys.forEach(_ref => {\n      let [hotkey, handler] = _ref;\n\n      if (getHotkeyMatcher(hotkey)(event.nativeEvent)) {\n        event.preventDefault();\n        handler(event);\n      }\n    });\n  };\n}\n\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","parseHotkey","hotkey","keys","toLowerCase","split","map","part","trim","modifiers","alt","includes","ctrl","meta","mod","shift","reservedKeys","freeKey","find","isExactHotkey","event","altKey","ctrlKey","metaKey","shiftKey","pressedKey","code","replace","getHotkeyMatcher","getHotkeyHandler","hotkeys","forEach","handler","nativeEvent","preventDefault"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/hooks/src/use-hotkeys/parse-hotkey.ts"],"sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    (pressedKey.toLowerCase() === key.toLowerCase() ||\n      event.code.replace('Key', '').toLowerCase() === key.toLowerCase())\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n\ntype HotkeyItem = [string, (event: React.KeyboardEvent<HTMLElement>) => void];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement>) => {\n    hotkeys.forEach(([hotkey, handler]) => {\n      if (getHotkeyMatcher(hotkey)(event.nativeEvent)) {\n        event.preventDefault();\n        handler(event);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}