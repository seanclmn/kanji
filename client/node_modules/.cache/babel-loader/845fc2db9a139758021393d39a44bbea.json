{"ast":null,"code":"import { useState } from 'react';\n\nfunction useDisclosure(initialState, callbacks) {\n  const [opened, setOpened] = useState(initialState);\n\n  const open = () => {\n    var _a;\n\n    if (!opened) {\n      setOpened(true);\n      (_a = callbacks == null ? void 0 : callbacks.onOpen) == null ? void 0 : _a.call(callbacks);\n    }\n  };\n\n  const close = () => {\n    var _a;\n\n    if (opened) {\n      setOpened(false);\n      (_a = callbacks == null ? void 0 : callbacks.onClose) == null ? void 0 : _a.call(callbacks);\n    }\n  };\n\n  const toggle = () => {\n    opened ? close() : open();\n  };\n\n  return [opened, {\n    open,\n    close,\n    toggle\n  }];\n}\n\nexport { useDisclosure };","map":{"version":3,"mappings":";;AACO,SAASA,aAAT,CAAuBC,YAAvB,EAAqCC,SAArC,EAAgD;EACrD,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAACJ,YAAD,CAApC;;EACA,MAAMK,IAAI,GAAG,MAAM;IACjB,IAAIC,EAAJ;;IACA,IAAI,CAACJ,MAAL,EAAa;MACXC,SAAS,CAAC,IAAD,CAAT;MACA,CAACG,EAAE,GAAGL,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACM,MAA7C,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwED,EAAE,CAACE,IAAH,CAAQP,SAAR,CAAxE;IACD;EACF,CAND;;EAOA,MAAMQ,KAAK,GAAG,MAAM;IAClB,IAAIH,EAAJ;;IACA,IAAIJ,MAAJ,EAAY;MACVC,SAAS,CAAC,KAAD,CAAT;MACA,CAACG,EAAE,GAAGL,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACS,OAA7C,KAAyD,IAAzD,GAAgE,KAAK,CAArE,GAAyEJ,EAAE,CAACE,IAAH,CAAQP,SAAR,CAAzE;IACD;EACF,CAND;;EAOA,MAAMU,MAAM,GAAG,MAAM;IACnBT,MAAM,GAAGO,KAAK,EAAR,GAAaJ,IAAI,EAAvB;EACD,CAFD;;EAGA,OAAO,CAACH,MAAD,EAAS;IAAEG,IAAF;IAAQI,KAAR;IAAeE;EAAf,CAAT,CAAP;AACF","names":["useDisclosure","initialState","callbacks","opened","setOpened","useState","open","_a","onOpen","call","close","onClose","toggle"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@mantine/hooks/src/use-disclosure/use-disclosure.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useDisclosure(\n  initialState: boolean,\n  callbacks?: { onOpen?(): void; onClose?(): void }\n) {\n  const [opened, setOpened] = useState(initialState);\n\n  const open = () => {\n    if (!opened) {\n      setOpened(true);\n      callbacks?.onOpen?.();\n    }\n  };\n\n  const close = () => {\n    if (opened) {\n      setOpened(false);\n      callbacks?.onClose?.();\n    }\n  };\n\n  const toggle = () => {\n    opened ? close() : open();\n  };\n\n  return [opened, { open, close, toggle }] as const;\n}\n"]},"metadata":{},"sourceType":"module"}