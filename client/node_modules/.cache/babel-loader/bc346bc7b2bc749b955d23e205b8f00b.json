{"ast":null,"code":"import * as e from \"react\";\nexport function useDirection(t, n) {\n  const [r, o] = e.useState(\"ltr\"),\n        [i, u] = e.useState(),\n        c = e.useRef(0);\n  return e.useEffect(() => {\n    if (void 0 === n && null != t && t.parentElement) {\n      const e = getComputedStyle(t.parentElement);\n      u(e);\n    }\n  }, [t, n]), e.useEffect(() => (void 0 === n && function e() {\n    c.current = requestAnimationFrame(() => {\n      const t = null == i ? void 0 : i.direction;\n      t && o(t), e();\n    });\n  }(), () => cancelAnimationFrame(c.current)), [i, n, o]), n || r;\n}","map":{"version":3,"mappings":";OAIO,SAASA,YAAT,CAAsBC,CAAtB,EAAmDC,CAAnD,EAAmDA;EACxD,OAAOC,CAAP,EAAkBC,CAAlB,IAAkCC,EAAMC,QAAND,CAA0B,KAA1BA,CAAlC;EAAA,MAA4D,CACrDE,CADqD,EACtCC,CADsC,IAClBH,EAAMC,QAAND,EAD1C;EAAA,MAEMI,IAASJ,EAAMK,MAANL,CAAqB,CAArBA,CAFf;EA4BA,OAxBAA,EAAMM,SAANN,CAAgB;IAKd,SAAsBO,CAAtB,KAAIV,CAAJ,IAAIA,QAA+BD,CAAnC,IAAmCA,EAASY,aAA5C,EAA2D;MACzD,MAAMN,IAAgBO,iBAAiBb,EAAQY,aAAzBC,CAAtB;MACAN,EAAiBD,CAAjBC;IAAiBD;EAAAA,CAPrBF,EASG,CAACJ,CAAD,EAAUC,CAAV,CATHG,GAWAA,EAAMM,SAANN,CAAgB,YASQO,CATR,KASVV,CATU,IACd,SAASa,CAAT,GAASA;IACPN,EAAOO,OAAPP,GAAiBQ,sBAAsB;MACrC,MAAMC,IAAMX,iBAAH,CAAGA,KAAeJ,SAA3B;MACIe,KAAKd,EAAac,CAAbd,CAALc,EACJH,GADIG;IACJH,CAHeE,CAAjBR;EAO+BM,CARjC,EADc,EAUP,MAAMI,qBAAqBV,EAAOO,OAA5BG,CAVC,CAAhBd,EAWG,CAACE,CAAD,EAAgBL,CAAhB,EAA+BE,CAA/B,CAXHC,CAXAA,EAwBOH,KAAiBC,CAAxB;AAAwBA","names":["useDirection","element","directionProp","direction","setDirection","React","useState","computedStyle","setComputedStyle","rAFRef","useRef","useEffect","undefined","parentElement","getComputedStyle","getDirection","current","requestAnimationFrame","dir","cancelAnimationFrame"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@radix-ui/react-use-direction/dist/packages/react/use-direction/src/useDirection.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Direction = 'ltr' | 'rtl';\n\nexport function useDirection(element: HTMLElement | null, directionProp?: Direction) {\n  const [direction, setDirection] = React.useState<Direction>('ltr');\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const rAFRef = React.useRef<number>(0);\n\n  React.useEffect(() => {\n    // We check inherited direction of the parent instead of the `element` itself.\n    // This is because we internally set the computed `dir` on the element so wouldn't be\n    // able to react to changes to the inherited direction. The `dir` attribute we set should\n    // always sync with the direction prop OR its inherited direction.\n    if (directionProp === undefined && element?.parentElement) {\n      const computedStyle = getComputedStyle(element.parentElement);\n      setComputedStyle(computedStyle);\n    }\n  }, [element, directionProp]);\n\n  React.useEffect(() => {\n    function getDirection() {\n      rAFRef.current = requestAnimationFrame(() => {\n        const dir = computedStyle?.direction as Direction | '' | undefined;\n        if (dir) setDirection(dir);\n        getDirection();\n      });\n    }\n\n    if (directionProp === undefined) getDirection();\n    return () => cancelAnimationFrame(rAFRef.current);\n  }, [computedStyle, directionProp, setDirection]);\n\n  return directionProp || direction;\n}\n"]},"metadata":{},"sourceType":"module"}