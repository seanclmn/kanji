{"ast":null,"code":"function escapeRegex(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\");\n}\n\nfunction highlighter(value, _highlight) {\n  if (_highlight == null) {\n    return [{\n      chunk: value,\n      highlighted: false\n    }];\n  }\n\n  const highlight = Array.isArray(_highlight) ? _highlight.map(escapeRegex) : escapeRegex(_highlight);\n  const shouldHighlight = Array.isArray(highlight) ? highlight.filter(part => part.trim().length > 0).length > 0 : highlight.trim() !== \"\";\n\n  if (!shouldHighlight) {\n    return [{\n      chunk: value,\n      highlighted: false\n    }];\n  }\n\n  const matcher = typeof highlight === \"string\" ? highlight.trim() : highlight.filter(part => part.trim().length !== 0).map(part => part.trim()).join(\"|\");\n  const re = new RegExp(`(${matcher})`, \"gi\");\n  const chunks = value.split(re).map(part => ({\n    chunk: part,\n    highlighted: re.test(part)\n  })).filter(_ref => {\n    let {\n      chunk\n    } = _ref;\n    return chunk;\n  });\n  return chunks;\n}\n\nexport { highlighter };","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;EAC1B,OAAOA,KAAK,CAACC,OAAN,CAAc,wBAAd,EAAwC,MAAxC,CAAP;AACD;;AACM,SAASC,WAAT,CAAqBF,KAArB,EAA4BG,UAA5B,EAAwC;EAC7C,IAAIA,UAAU,IAAI,IAAlB,EAAwB;IACtB,OAAO,CAAC;MAAEC,KAAK,EAAEJ,KAAT;MAAgBK,WAAW,EAAE;IAA7B,CAAD,CAAP;EACD;;EACD,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcL,UAAd,IAA4BA,UAAU,CAACM,GAAX,CAAeV,WAAf,CAA5B,GAA0DA,WAAW,CAACI,UAAD,CAAvF;EACA,MAAMO,eAAe,GAAGH,KAAK,CAACC,OAAN,CAAcF,SAAd,IAA2BA,SAAS,CAACK,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAACC,IAAL,GAAYC,MAAZ,GAAqB,CAAhD,EAAmDA,MAAnD,GAA4D,CAAvF,GAA2FR,SAAS,CAACO,IAAV,OAAqB,EAAxI;;EACA,IAAI,CAACH,eAAL,EAAsB;IACpB,OAAO,CAAC;MAAEN,KAAK,EAAEJ,KAAT;MAAgBK,WAAW,EAAE;IAA7B,CAAD,CAAP;EACD;;EACD,MAAMU,OAAO,GAAG,OAAOT,SAAP,KAAqB,QAArB,GAAgCA,SAAS,CAACO,IAAV,EAAhC,GAAmDP,SAAS,CAACK,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAACC,IAAL,GAAYC,MAAZ,KAAuB,CAAlD,EAAqDL,GAArD,CAA0DG,IAAD,IAAUA,IAAI,CAACC,IAAL,EAAnE,EAAgFG,IAAhF,CAAqF,GAArF,CAAnE;EACA,MAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAY,IAAGH,OAAQ,GAAvB,EAA2B,IAA3B,CAAX;EACA,MAAMI,MAAM,GAAGnB,KAAK,CAACoB,KAAN,CAAYH,EAAZ,EAAgBR,GAAhB,CAAqBG,IAAD,KAAW;IAAER,KAAK,EAAEQ,IAAT;IAAeP,WAAW,EAAEY,EAAE,CAACI,IAAH,CAAQT,IAAR;EAA5B,CAAX,CAApB,EAA6ED,MAA7E,CAAoF;IAAA,IAAC;MAAEP;IAAF,CAAD;IAAA,OAAeA,KAAf;EAAA,CAApF,CAAf;EACA,OAAOe,MAAP;AACF","names":["escapeRegex","value","replace","highlighter","_highlight","chunk","highlighted","highlight","Array","isArray","map","shouldHighlight","filter","part","trim","length","matcher","join","re","RegExp","chunks","split","test"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/core/src/components/Highlight/highlighter/highlighter.ts"],"sourcesContent":["function escapeRegex(value: string) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&');\n}\n\nexport function highlighter(value: string, _highlight: string | string[]) {\n  if (_highlight == null) {\n    return [{ chunk: value, highlighted: false }];\n  }\n\n  const highlight = Array.isArray(_highlight)\n    ? _highlight.map(escapeRegex)\n    : escapeRegex(_highlight);\n\n  const shouldHighlight = Array.isArray(highlight)\n    ? highlight.filter((part) => part.trim().length > 0).length > 0\n    : highlight.trim() !== '';\n\n  if (!shouldHighlight) {\n    return [{ chunk: value, highlighted: false }];\n  }\n\n  const matcher =\n    typeof highlight === 'string'\n      ? highlight.trim()\n      : highlight\n          .filter((part) => part.trim().length !== 0)\n          .map((part) => part.trim())\n          .join('|');\n\n  const re = new RegExp(`(${matcher})`, 'gi');\n  const chunks = value\n    .split(re)\n    .map((part) => ({ chunk: part, highlighted: re.test(part) }))\n    .filter(({ chunk }) => chunk);\n\n  return chunks;\n}\n"]},"metadata":{},"sourceType":"module"}