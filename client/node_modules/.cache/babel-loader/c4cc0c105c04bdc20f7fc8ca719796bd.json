{"ast":null,"code":"function round(number) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10 ** digits;\n  return Math.round(base * number) / base;\n}\n\nfunction hslaToHsva(_ref) {\n  let {\n    h,\n    s,\n    l,\n    a\n  } = _ref;\n  const ss = s * ((l < 50 ? l : 100 - l) / 100);\n  return {\n    h,\n    s: ss > 0 ? 2 * ss / (l + ss) * 100 : 0,\n    v: l + ss,\n    a\n  };\n}\n\nconst angleUnits = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2)\n};\n\nfunction parseHue(value) {\n  let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"deg\";\n  return Number(value) * (angleUnits[unit] || 1);\n}\n\nconst HSL_REGEXP = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nfunction parseHsla(color) {\n  const match = HSL_REGEXP.exec(color);\n\n  if (!match) {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === void 0 ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n}\n\nfunction rgbaToHsva(_ref2) {\n  let {\n    r,\n    g,\n    b,\n    a\n  } = _ref2;\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n  const hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? delta / max * 100 : 0),\n    v: round(max / 255 * 100),\n    a\n  };\n}\n\nfunction parseHex(color) {\n  const hex = color[0] === \"#\" ? color.slice(1) : color;\n\n  if (hex.length === 3) {\n    return rgbaToHsva({\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1\n    });\n  }\n\n  return rgbaToHsva({\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n    a: 1\n  });\n}\n\nconst RGB_REGEXP = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nfunction parseRgba(color) {\n  const match = RGB_REGEXP.exec(color);\n\n  if (!match) {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === void 0 ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n  });\n}\n\nconst VALIDATION_REGEXP = {\n  hex: /^#?([0-9A-F]{3}){1,2}$/i,\n  rgb: /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  rgba: /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  hsl: /hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\)/i,\n  hsla: /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*(\\d*(?:\\.\\d+)?)\\)$/i\n};\nconst CONVERTERS = {\n  hex: parseHex,\n  rgb: parseRgba,\n  rgba: parseRgba,\n  hsl: parseHsla,\n  hsla: parseHsla\n};\n\nfunction isColorValid(color) {\n  for (const [, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(color)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction parseColor(color) {\n  if (typeof color !== \"string\") {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  if (color === \"transparent\") {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 0\n    };\n  }\n\n  const trimmed = color.trim();\n\n  for (const [rule, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(trimmed)) {\n      return CONVERTERS[rule](trimmed);\n    }\n  }\n\n  return {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n}\n\nexport { isColorValid, parseColor, parseHex, parseHsla, parseHue, parseRgba, round };","map":{"version":3,"mappings":"AAAO,SAASA,KAAT,CAAeC,MAAf,EAAwD;EAAA,IAAjCC,MAAiC,uEAAxB,CAAwB;EAAA,IAArBC,IAAqB,uEAAd,MAAMD,MAAQ;EAC7D,OAAOE,IAAI,CAACJ,KAAL,CAAWG,IAAI,GAAGF,MAAlB,IAA4BE,IAAnC;AACD;;AACD,SAASE,UAAT,OAAoC;EAAA,IAAhB;IAAEC,CAAF;IAAKC,CAAL;IAAQC,CAAR;IAAWC;EAAX,CAAgB;EAClC,MAAMC,EAAE,GAAGH,CAAC,IAAI,CAACC,CAAC,GAAG,EAAJ,GAASA,CAAT,GAAa,MAAMA,CAApB,IAAyB,GAA7B,CAAZ;EACA,OAAO;IACLF,CADK;IAELC,CAAC,EAAEG,EAAE,GAAG,CAAL,GAAS,IAAIA,EAAJ,IAAUF,CAAC,GAAGE,EAAd,IAAoB,GAA7B,GAAmC,CAFjC;IAGLC,CAAC,EAAEH,CAAC,GAAGE,EAHF;IAILD;EAJK,CAAP;AAMD;;AACD,MAAMG,UAAU,GAAG;EACjBC,IAAI,EAAE,MAAM,GADK;EAEjBC,IAAI,EAAE,GAFW;EAGjBC,GAAG,EAAE,OAAOX,IAAI,CAACY,EAAL,GAAU,CAAjB;AAHY,CAAnB;;AAKO,SAASC,QAAT,CAAkBC,KAAlB,EAAuC;EAAA,IAAdC,IAAc,uEAAP,KAAO;EAC5C,OAAOC,MAAM,CAACF,KAAD,CAAN,IAAiBN,UAAU,CAACO,IAAD,CAAV,IAAoB,CAArC,CAAP;AACD;;AACD,MAAME,UAAU,GAAG,4HAAnB;;AACO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAC/B,MAAMC,KAAK,GAAGH,UAAU,CAACI,IAAX,CAAgBF,KAAhB,CAAd;;EACA,IAAI,CAACC,KAAL,EAAY;IACV,OAAO;MAAElB,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE,CAAX;MAAcI,CAAC,EAAE,CAAjB;MAAoBF,CAAC,EAAE;IAAvB,CAAP;EACD;;EACD,OAAOJ,UAAU,CAAC;IAChBC,CAAC,EAAEW,QAAQ,CAACO,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CADK;IAEhBjB,CAAC,EAAEa,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAFO;IAGhBhB,CAAC,EAAEY,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAHO;IAIhBf,CAAC,EAAEe,KAAK,CAAC,CAAD,CAAL,KAAa,KAAK,CAAlB,GAAsB,CAAtB,GAA0BJ,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAAN,IAAoBA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAX,GAAiB,CAArC;EAJb,CAAD,CAAjB;AAMD;;AACD,SAASE,UAAT,QAAoC;EAAA,IAAhB;IAAEC,CAAF;IAAKC,CAAL;IAAQC,CAAR;IAAWpB;EAAX,CAAgB;EAClC,MAAMqB,GAAG,GAAG1B,IAAI,CAAC0B,GAAL,CAASH,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAZ;EACA,MAAME,KAAK,GAAGD,GAAG,GAAG1B,IAAI,CAAC4B,GAAL,CAASL,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAApB;EACA,MAAMI,EAAE,GAAGF,KAAK,GAAGD,GAAG,KAAKH,CAAR,GAAY,CAACC,CAAC,GAAGC,CAAL,IAAUE,KAAtB,GAA8BD,GAAG,KAAKF,CAAR,GAAY,IAAI,CAACC,CAAC,GAAGF,CAAL,IAAUI,KAA1B,GAAkC,IAAI,CAACJ,CAAC,GAAGC,CAAL,IAAUG,KAAjF,GAAyF,CAAzG;EACA,OAAO;IACLzB,CAAC,EAAEN,KAAK,CAAC,MAAMiC,EAAE,GAAG,CAAL,GAASA,EAAE,GAAG,CAAd,GAAkBA,EAAxB,CAAD,CADH;IAEL1B,CAAC,EAAEP,KAAK,CAAC8B,GAAG,GAAGC,KAAK,GAAGD,GAAR,GAAc,GAAjB,GAAuB,CAA3B,CAFH;IAGLnB,CAAC,EAAEX,KAAK,CAAC8B,GAAG,GAAG,GAAN,GAAY,GAAb,CAHH;IAILrB;EAJK,CAAP;AAMD;;AACM,SAASyB,QAAT,CAAkBX,KAAlB,EAAyB;EAC9B,MAAMY,GAAG,GAAGZ,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,GAAmBA,KAAK,CAACa,KAAN,CAAY,CAAZ,CAAnB,GAAoCb,KAAhD;;EACA,IAAIY,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;IACpB,OAAOX,UAAU,CAAC;MAChBC,CAAC,EAAEW,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAb,EAAkB,EAAlB,CADK;MAEhBP,CAAC,EAAEU,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAb,EAAkB,EAAlB,CAFK;MAGhBN,CAAC,EAAES,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAb,EAAkB,EAAlB,CAHK;MAIhB1B,CAAC,EAAE;IAJa,CAAD,CAAjB;EAMD;;EACD,OAAOiB,UAAU,CAAC;IAChBC,CAAC,EAAEW,QAAQ,CAACH,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CADK;IAEhBR,CAAC,EAAEU,QAAQ,CAACH,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAFK;IAGhBP,CAAC,EAAES,QAAQ,CAACH,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAHK;IAIhB3B,CAAC,EAAE;EAJa,CAAD,CAAjB;AAMD;;AACD,MAAM8B,UAAU,GAAG,gHAAnB;;AACO,SAASC,SAAT,CAAmBjB,KAAnB,EAA0B;EAC/B,MAAMC,KAAK,GAAGe,UAAU,CAACd,IAAX,CAAgBF,KAAhB,CAAd;;EACA,IAAI,CAACC,KAAL,EAAY;IACV,OAAO;MAAElB,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE,CAAX;MAAcI,CAAC,EAAE,CAAjB;MAAoBF,CAAC,EAAE;IAAvB,CAAP;EACD;;EACD,OAAOiB,UAAU,CAAC;IAChBC,CAAC,EAAEP,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAAN,IAAoBA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,GAAjB,GAAuB,CAA3C,CADa;IAEhBI,CAAC,EAAER,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAAN,IAAoBA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,GAAjB,GAAuB,CAA3C,CAFa;IAGhBK,CAAC,EAAET,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAAN,IAAoBA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,GAAjB,GAAuB,CAA3C,CAHa;IAIhBf,CAAC,EAAEe,KAAK,CAAC,CAAD,CAAL,KAAa,KAAK,CAAlB,GAAsB,CAAtB,GAA0BJ,MAAM,CAACI,KAAK,CAAC,CAAD,CAAN,CAAN,IAAoBA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAX,GAAiB,CAArC;EAJb,CAAD,CAAjB;AAMD;;AACD,MAAMiB,iBAAiB,GAAG;EACxBN,GAAG,EAAE,yBADmB;EAExBO,GAAG,EAAE,2DAFmB;EAGxBC,IAAI,EAAE,4DAHkB;EAIxBC,GAAG,EAAE,gEAJmB;EAKxBC,IAAI,EAAE;AALkB,CAA1B;AAOA,MAAMC,UAAU,GAAG;EACjBX,GAAG,EAAED,QADY;EAEjBQ,GAAG,EAAEF,SAFY;EAGjBG,IAAI,EAAEH,SAHW;EAIjBI,GAAG,EAAEtB,SAJY;EAKjBuB,IAAI,EAAEvB;AALW,CAAnB;;AAOO,SAASyB,YAAT,CAAsBxB,KAAtB,EAA6B;EAClC,KAAK,MAAM,GAAGyB,MAAH,CAAX,IAAyBC,MAAM,CAACC,OAAP,CAAeT,iBAAf,CAAzB,EAA4D;IAC1D,IAAIO,MAAM,CAACG,IAAP,CAAY5B,KAAZ,CAAJ,EAAwB;MACtB,OAAO,IAAP;IACD;EACF;;EACD,OAAO,KAAP;AACD;;AACM,SAAS6B,UAAT,CAAoB7B,KAApB,EAA2B;EAChC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO;MAAEjB,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE,CAAX;MAAcI,CAAC,EAAE,CAAjB;MAAoBF,CAAC,EAAE;IAAvB,CAAP;EACD;;EACD,IAAIc,KAAK,KAAK,aAAd,EAA6B;IAC3B,OAAO;MAAEjB,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE,CAAX;MAAcI,CAAC,EAAE,CAAjB;MAAoBF,CAAC,EAAE;IAAvB,CAAP;EACD;;EACD,MAAM4C,OAAO,GAAG9B,KAAK,CAAC+B,IAAN,EAAhB;;EACA,KAAK,MAAM,CAACC,IAAD,EAAOP,MAAP,CAAX,IAA6BC,MAAM,CAACC,OAAP,CAAeT,iBAAf,CAA7B,EAAgE;IAC9D,IAAIO,MAAM,CAACG,IAAP,CAAYE,OAAZ,CAAJ,EAA0B;MACxB,OAAOP,UAAU,CAACS,IAAD,CAAV,CAAiBF,OAAjB,CAAP;IACD;EACF;;EACD,OAAO;IAAE/C,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE,CAAX;IAAcI,CAAC,EAAE,CAAjB;IAAoBF,CAAC,EAAE;EAAvB,CAAP;AACF","names":["round","number","digits","base","Math","hslaToHsva","h","s","l","a","ss","v","angleUnits","grad","turn","rad","PI","parseHue","value","unit","Number","HSL_REGEXP","parseHsla","color","match","exec","rgbaToHsva","r","g","b","max","delta","min","hh","parseHex","hex","slice","length","parseInt","RGB_REGEXP","parseRgba","VALIDATION_REGEXP","rgb","rgba","hsl","hsla","CONVERTERS","isColorValid","regexp","Object","entries","test","parseColor","trimmed","trim","rule"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/core/src/components/ColorPicker/converters/parsers.ts"],"sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\n\nexport function round(number: number, digits = 0, base = 10 ** digits) {\n  return Math.round(base * number) / base;\n}\n\nfunction hslaToHsva({ h, s, l, a }): HsvaColor {\n  const ss = s * ((l < 50 ? l : 100 - l) / 100);\n\n  return {\n    h,\n    s: ss > 0 ? ((2 * ss) / (l + ss)) * 100 : 0,\n    v: l + ss,\n    a,\n  };\n}\n\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2),\n};\n\nexport function parseHue(value: string, unit = 'deg') {\n  return Number(value) * (angleUnits[unit] || 1);\n}\n\nconst HSL_REGEXP =\n  /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nexport function parseHsla(color: string): HsvaColor {\n  const match = HSL_REGEXP.exec(color);\n\n  if (!match) {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n}\n\nfunction rgbaToHsva({ r, g, b, a }: RgbaColor): HsvaColor {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n      ? 2 + (b - r) / delta\n      : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a,\n  };\n}\n\nexport function parseHex(color: string): HsvaColor {\n  const hex = color[0] === '#' ? color.slice(1) : color;\n\n  if (hex.length === 3) {\n    return rgbaToHsva({\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1,\n    });\n  }\n\n  return rgbaToHsva({\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n    a: 1,\n  });\n}\n\nconst RGB_REGEXP =\n  /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nexport function parseRgba(color: string): HsvaColor {\n  const match = RGB_REGEXP.exec(color);\n\n  if (!match) {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n  });\n}\n\nconst VALIDATION_REGEXP: Record<ColorFormat, RegExp> = {\n  hex: /^#?([0-9A-F]{3}){1,2}$/i,\n  rgb: /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  rgba: /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  hsl: /hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\)/i,\n  hsla: /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*(\\d*(?:\\.\\d+)?)\\)$/i,\n};\n\nconst CONVERTERS: Record<ColorFormat, (color: string) => HsvaColor> = {\n  hex: parseHex,\n  rgb: parseRgba,\n  rgba: parseRgba,\n  hsl: parseHsla,\n  hsla: parseHsla,\n};\n\nexport function isColorValid(color: string) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(color)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function parseColor(color: string): HsvaColor {\n  if (typeof color !== 'string') {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  if (color === 'transparent') {\n    return { h: 0, s: 0, v: 0, a: 0 };\n  }\n\n  const trimmed = color.trim();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [rule, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(trimmed)) {\n      return CONVERTERS[rule](trimmed);\n    }\n  }\n\n  return { h: 0, s: 0, v: 0, a: 1 };\n}\n"]},"metadata":{},"sourceType":"module"}