{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Icon } from \"../icon/icon\";\nimport { normalizeKeyCombo } from \"./hotkeyParser\";\nvar KeyIcons = {\n  alt: {\n    icon: \"key-option\",\n    iconTitle: \"Alt/Option key\"\n  },\n  cmd: {\n    icon: \"key-command\",\n    iconTitle: \"Command key\"\n  },\n  ctrl: {\n    icon: \"key-control\",\n    iconTitle: \"Control key\"\n  },\n  delete: {\n    icon: \"key-delete\",\n    iconTitle: \"Delete key\"\n  },\n  down: {\n    icon: \"arrow-down\",\n    iconTitle: \"Down key\"\n  },\n  enter: {\n    icon: \"key-enter\",\n    iconTitle: \"Enter key\"\n  },\n  left: {\n    icon: \"arrow-left\",\n    iconTitle: \"Left key\"\n  },\n  meta: {\n    icon: \"key-command\",\n    iconTitle: \"Command key\"\n  },\n  right: {\n    icon: \"arrow-right\",\n    iconTitle: \"Right key\"\n  },\n  shift: {\n    icon: \"key-shift\",\n    iconTitle: \"Shift key\"\n  },\n  up: {\n    icon: \"arrow-up\",\n    iconTitle: \"Up key\"\n  }\n};\n\nvar KeyCombo =\n/** @class */\nfunction (_super) {\n  __extends(KeyCombo, _super);\n\n  function KeyCombo() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderKey = function (key, index) {\n      var _a;\n\n      var icon = KeyIcons[key];\n      var reactKey = \"key-\".concat(index);\n      return React.createElement(\"kbd\", {\n        className: classNames(Classes.KEY, (_a = {}, _a[Classes.MODIFIER_KEY] = icon != null, _a)),\n        key: reactKey\n      }, icon != null && React.createElement(Icon, {\n        icon: icon.icon,\n        title: icon.iconTitle\n      }), key);\n    };\n\n    _this.renderMinimalKey = function (key, index) {\n      var icon = KeyIcons[key];\n      return icon == null ? key : React.createElement(Icon, {\n        icon: icon.icon,\n        title: icon.iconTitle,\n        key: \"key-\".concat(index)\n      });\n    };\n\n    return _this;\n  }\n\n  KeyCombo.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        combo = _a.combo,\n        minimal = _a.minimal;\n    var keys = normalizeKeyCombo(combo).map(function (key) {\n      return key.length === 1 ? key.toUpperCase() : key;\n    }).map(minimal ? this.renderMinimalKey : this.renderKey);\n    return React.createElement(\"span\", {\n      className: classNames(Classes.KEY_COMBO, className)\n    }, keys);\n  };\n\n  KeyCombo.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".KeyCombo\");\n  return KeyCombo;\n}(AbstractPureComponent2);\n\nexport { KeyCombo };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","Icon","normalizeKeyCombo","KeyIcons","alt","icon","iconTitle","cmd","ctrl","delete","down","enter","left","meta","right","shift","up","__extends","_this","key","index","reactKey","className","KEY","_a","MODIFIER_KEY","title","KeyCombo","props","combo","minimal","keys","map","length","toUpperCase","renderMinimalKey","renderKey","KEY_COMBO"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/hotkeys/keyCombo.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Props } from \"../../common\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { normalizeKeyCombo } from \"./hotkeyParser\";\n\nconst KeyIcons: { [key: string]: { icon: IconName; iconTitle: string } } = {\n    alt: { icon: \"key-option\", iconTitle: \"Alt/Option key\" },\n    cmd: { icon: \"key-command\", iconTitle: \"Command key\" },\n    ctrl: { icon: \"key-control\", iconTitle: \"Control key\" },\n    delete: { icon: \"key-delete\", iconTitle: \"Delete key\" },\n    down: { icon: \"arrow-down\", iconTitle: \"Down key\" },\n    enter: { icon: \"key-enter\", iconTitle: \"Enter key\" },\n    left: { icon: \"arrow-left\", iconTitle: \"Left key\" },\n    meta: { icon: \"key-command\", iconTitle: \"Command key\" },\n    right: { icon: \"arrow-right\", iconTitle: \"Right key\" },\n    shift: { icon: \"key-shift\", iconTitle: \"Shift key\" },\n    up: { icon: \"arrow-up\", iconTitle: \"Up key\" },\n};\n\n// eslint-disable-next-line deprecation/deprecation\nexport type KeyComboTagProps = IKeyComboProps;\n/** @deprecated use KeyComboTagProps */\nexport interface IKeyComboProps extends Props {\n    /** The key combo to display, such as `\"cmd + s\"`. */\n    combo: string;\n\n    /**\n     * Whether to render in a minimal style.\n     * If `false`, each key in the combo will be rendered inside a `<kbd>` tag.\n     * If `true`, only the icon or short name of a key will be rendered with no wrapper styles.\n     *\n     * @default false\n     */\n    minimal?: boolean;\n}\n\nexport class KeyCombo extends AbstractPureComponent2<KeyComboTagProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.KeyCombo`;\n\n    public render() {\n        const { className, combo, minimal } = this.props;\n        const keys = normalizeKeyCombo(combo)\n            .map(key => (key.length === 1 ? key.toUpperCase() : key))\n            .map(minimal ? this.renderMinimalKey : this.renderKey);\n        return <span className={classNames(Classes.KEY_COMBO, className)}>{keys}</span>;\n    }\n\n    private renderKey = (key: string, index: number) => {\n        const icon = KeyIcons[key];\n        const reactKey = `key-${index}`;\n        return (\n            <kbd className={classNames(Classes.KEY, { [Classes.MODIFIER_KEY]: icon != null })} key={reactKey}>\n                {icon != null && <Icon icon={icon.icon} title={icon.iconTitle} />}\n                {key}\n            </kbd>\n        );\n    };\n\n    private renderMinimalKey = (key: string, index: number) => {\n        const icon = KeyIcons[key];\n        return icon == null ? key : <Icon icon={icon.icon} title={icon.iconTitle} key={`key-${index}`} />;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}