{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\n\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nfunction useFocusWithin() {\n  let {\n    onBlur,\n    onFocus\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const ref = useRef();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n\n  const setFocused = value => {\n    _setFocused(value);\n\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = event => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus == null ? void 0 : onFocus(event);\n    }\n  };\n\n  const handleFocusOut = event => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"focusin\", handleFocusIn);\n      ref.current.addEventListener(\"focusout\", handleFocusOut);\n      return () => {\n        var _a, _b;\n\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"focusin\", handleFocusIn);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"focusout\", handleFocusOut);\n      };\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref,\n    focused\n  };\n}\n\nexport { useFocusWithin };","map":{"version":3,"mappings":";;AACA,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;EACpC,IAAIA,KAAK,CAACC,aAAN,YAA+BC,WAA/B,IAA8CF,KAAK,CAACG,aAAN,YAA+BD,WAAjF,EAA8F;IAC5F,OAAOF,KAAK,CAACC,aAAN,CAAoBG,QAApB,CAA6BJ,KAAK,CAACG,aAAnC,CAAP;EACD;;EACD,OAAO,KAAP;AACD;;AACM,SAASE,cAAT,GAGC;EAAA,IAHuB;IAC7BC,MAD6B;IAE7BC;EAF6B,CAGvB,uEAAJ,EAAI;EACN,MAAMC,GAAG,GAAGC,MAAM,EAAlB;EACA,MAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBC,QAAQ,CAAC,KAAD,CAAvC;EACA,MAAMC,UAAU,GAAGJ,MAAM,CAAC,KAAD,CAAzB;;EACA,MAAMK,UAAU,GAAIC,KAAD,IAAW;IAC5BJ,WAAW,CAACI,KAAD,CAAX;;IACAF,UAAU,CAACG,OAAX,GAAqBD,KAArB;EACD,CAHD;;EAIA,MAAME,aAAa,GAAIjB,KAAD,IAAW;IAC/B,IAAI,CAACa,UAAU,CAACG,OAAhB,EAAyB;MACvBF,UAAU,CAAC,IAAD,CAAV;MACAP,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACP,KAAD,CAAlC;IACD;EACF,CALD;;EAMA,MAAMkB,cAAc,GAAIlB,KAAD,IAAW;IAChC,IAAIa,UAAU,CAACG,OAAX,IAAsB,CAACjB,qBAAqB,CAACC,KAAD,CAAhD,EAAyD;MACvDc,UAAU,CAAC,KAAD,CAAV;MACAR,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACN,KAAD,CAAhC;IACD;EACF,CALD;;EAMAmB,SAAS,CAAC,MAAM;IACd,IAAIX,GAAG,CAACQ,OAAR,EAAiB;MACfR,GAAG,CAACQ,OAAJ,CAAYI,gBAAZ,CAA6B,SAA7B,EAAwCH,aAAxC;MACAT,GAAG,CAACQ,OAAJ,CAAYI,gBAAZ,CAA6B,UAA7B,EAAyCF,cAAzC;MACA,OAAO,MAAM;QACX,IAAIG,EAAJ,EAAQC,EAAR;;QACA,CAACD,EAAE,GAAGb,GAAG,CAACQ,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsCK,EAAE,CAACE,mBAAH,CAAuB,SAAvB,EAAkCN,aAAlC,CAAtC;QACA,CAACK,EAAE,GAAGd,GAAG,CAACQ,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsCM,EAAE,CAACC,mBAAH,CAAuB,UAAvB,EAAmCL,cAAnC,CAAtC;MACD,CAJD;IAKD;;IACD,OAAO,KAAK,CAAZ;EACD,CAXQ,EAWN,EAXM,CAAT;EAYA,OAAO;IAAEV,GAAF;IAAOE;EAAP,CAAP;AACF","names":["containsRelatedTarget","event","currentTarget","HTMLElement","relatedTarget","contains","useFocusWithin","onBlur","onFocus","ref","useRef","focused","_setFocused","useState","focusedRef","setFocused","value","current","handleFocusIn","handleFocusOut","useEffect","addEventListener","_a","_b","removeEventListener"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/hooks/src/use-focus-within/use-focus-within.ts"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nexport interface UseFocusWithinOptions {\n  onFocus?(event: FocusEvent): void;\n  onBlur?(event: FocusEvent): void;\n}\n\nfunction containsRelatedTarget(event: FocusEvent) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nexport function useFocusWithin<T extends HTMLElement = any>({\n  onBlur,\n  onFocus,\n}: UseFocusWithinOptions = {}): { ref: React.MutableRefObject<T>; focused: boolean } {\n  const ref = useRef<T>();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const setFocused = (value: boolean) => {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = (event: FocusEvent) => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus?.(event);\n    }\n  };\n\n  const handleFocusOut = (event: FocusEvent) => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur?.(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('focusin', handleFocusIn);\n      ref.current.addEventListener('focusout', handleFocusOut);\n\n      return () => {\n        ref.current?.removeEventListener('focusin', handleFocusIn);\n        ref.current?.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, focused };\n}\n"]},"metadata":{},"sourceType":"module"}