{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\n\nfunction useUncontrolled(_ref) {\n  let {\n    value,\n    defaultValue,\n    finalValue,\n    rule,\n    onChange,\n    onValueUpdate\n  } = _ref;\n  const shouldBeControlled = rule(value);\n  const modeRef = useRef(\"initial\");\n  const initialValue = rule(defaultValue) ? defaultValue : finalValue;\n  const [uncontrolledValue, setUncontrolledValue] = useState(initialValue);\n  let effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n\n  if (!shouldBeControlled && modeRef.current === \"controlled\") {\n    effectiveValue = finalValue;\n  }\n\n  modeRef.current = shouldBeControlled ? \"controlled\" : \"uncontrolled\";\n  const mode = modeRef.current;\n\n  const handleChange = nextValue => {\n    typeof onChange === \"function\" && onChange(nextValue);\n\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(nextValue);\n    }\n  };\n\n  useEffect(() => {\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(effectiveValue);\n    }\n\n    typeof onValueUpdate === \"function\" && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n  return [effectiveValue, handleChange, modeRef.current];\n}\n\nexport { useUncontrolled };","map":{"version":3,"mappings":";;AACO,SAASA,eAAT,OAOJ;EAAA,IAP6B;IAC9BC,KAD8B;IAE9BC,YAF8B;IAG9BC,UAH8B;IAI9BC,IAJ8B;IAK9BC,QAL8B;IAM9BC;EAN8B,CAO7B;EACD,MAAMC,kBAAkB,GAAGH,IAAI,CAACH,KAAD,CAA/B;EACA,MAAMO,OAAO,GAAGC,MAAM,CAAC,SAAD,CAAtB;EACA,MAAMC,YAAY,GAAGN,IAAI,CAACF,YAAD,CAAJ,GAAqBA,YAArB,GAAoCC,UAAzD;EACA,MAAM,CAACQ,iBAAD,EAAoBC,oBAApB,IAA4CC,QAAQ,CAACH,YAAD,CAA1D;EACA,IAAII,cAAc,GAAGP,kBAAkB,GAAGN,KAAH,GAAWU,iBAAlD;;EACA,IAAI,CAACJ,kBAAD,IAAuBC,OAAO,CAACO,OAAR,KAAoB,YAA/C,EAA6D;IAC3DD,cAAc,GAAGX,UAAjB;EACD;;EACDK,OAAO,CAACO,OAAR,GAAkBR,kBAAkB,GAAG,YAAH,GAAkB,cAAtD;EACA,MAAMS,IAAI,GAAGR,OAAO,CAACO,OAArB;;EACA,MAAME,YAAY,GAAIC,SAAD,IAAe;IAClC,OAAOb,QAAP,KAAoB,UAApB,IAAkCA,QAAQ,CAACa,SAAD,CAA1C;;IACA,IAAIF,IAAI,KAAK,cAAb,EAA6B;MAC3BJ,oBAAoB,CAACM,SAAD,CAApB;IACD;EACF,CALD;;EAMAC,SAAS,CAAC,MAAM;IACd,IAAIH,IAAI,KAAK,cAAb,EAA6B;MAC3BJ,oBAAoB,CAACE,cAAD,CAApB;IACD;;IACD,OAAOR,aAAP,KAAyB,UAAzB,IAAuCA,aAAa,CAACQ,cAAD,CAApD;EACD,CALQ,EAKN,CAACE,IAAD,EAAOF,cAAP,CALM,CAAT;EAMA,OAAO,CAACA,cAAD,EAAiBG,YAAjB,EAA+BT,OAAO,CAACO,OAAvC,CAAP;AACF","names":["useUncontrolled","value","defaultValue","finalValue","rule","onChange","onValueUpdate","shouldBeControlled","modeRef","useRef","initialValue","uncontrolledValue","setUncontrolledValue","useState","effectiveValue","current","mode","handleChange","nextValue","useEffect"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/hooks/src/use-uncontrolled/use-uncontrolled.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport type UncontrolledMode = 'initial' | 'controlled' | 'uncontrolled';\n\nexport interface UncontrolledOptions<T> {\n  value: T | null | undefined;\n  defaultValue: T | null | undefined;\n  finalValue: T | null;\n  onChange(value: T | null): void;\n  onValueUpdate?(value: T | null): void;\n  rule: (value: T | null | undefined) => boolean;\n}\n\nexport function useUncontrolled<T>({\n  value,\n  defaultValue,\n  finalValue,\n  rule,\n  onChange,\n  onValueUpdate,\n}: UncontrolledOptions<T>): readonly [T | null, (nextValue: T | null) => void, UncontrolledMode] {\n  // determine, whether new props indicate controlled state\n  const shouldBeControlled = rule(value);\n\n  // initialize state\n  const modeRef = useRef<UncontrolledMode>('initial');\n  const initialValue = rule(defaultValue) ? defaultValue : finalValue;\n  const [uncontrolledValue, setUncontrolledValue] = useState(initialValue);\n\n  // compute effective value\n  let effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n\n  if (!shouldBeControlled && modeRef.current === 'controlled') {\n    // We are transitioning from controlled to uncontrolled\n    // this transition is special as it happens when clearing out\n    // the input using \"invalid\" value (typically null or undefined).\n    //\n    // Since the value is invalid, doing nothing would mean just\n    // transitioning to uncontrolled state and using whatever value\n    // it currently holds which is likely not the behavior\n    // user expects, so lets change the state to finalValue.\n    //\n    // The value will be propagated to internal state by useEffect below.\n\n    effectiveValue = finalValue;\n  }\n\n  modeRef.current = shouldBeControlled ? 'controlled' : 'uncontrolled';\n  const mode = modeRef.current;\n\n  const handleChange = (nextValue: T | null) => {\n    typeof onChange === 'function' && onChange(nextValue);\n\n    // Controlled input only triggers onChange event and expects\n    // the controller to propagate new value back.\n    if (mode === 'uncontrolled') {\n      setUncontrolledValue(nextValue);\n    }\n  };\n\n  useEffect(() => {\n    if (mode === 'uncontrolled') {\n      setUncontrolledValue(effectiveValue);\n    }\n    typeof onValueUpdate === 'function' && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n\n  return [effectiveValue, handleChange, modeRef.current] as const;\n}\n"]},"metadata":{},"sourceType":"module"}