{"ast":null,"code":"var _jsxFileName = \"/Users/seancoleman/Projects/kanji/client/src/components/QuizGame.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QuizGame(_ref) {\n  _s();\n\n  let {\n    questions,\n    endQuiz\n  } = _ref;\n  console.log(questions);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answered, setAnswered] = useState(true);\n  const [colors, setColors] = useState([\"blue\", \"blue\", \"blue\", \"blue\"]);\n\n  const nextQuestion = () => {\n    setQuestionIndex(questionIndex + 1);\n    setAnswered(true);\n    setColors([\"blue\", \"blue\", \"blue\", \"blue\"]);\n  };\n\n  const answerQuestion = index => {\n    if (answered) {\n      setAnswered(false);\n      let newColors = colors;\n      if (questions[questionIndex].options[index].correct) newColors[index] = \"green\";else newColors[index] = \"red\";\n      setColors(newColors);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: questions[0].question[0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this) // <div className=\"mx-auto w-[70%]\">\n  //   <p>{questions[questionIndex].question}</p>\n  //   <div className=\"grid grid-cols-2 gap-4\">\n  //     {questions[questionIndex].options.map((option,index)=> \n  //       <Button \n  //         onClick={()=>(answerQuestion(index))}\n  //         color={colors[index]}\n  //         key={index}\n  //         size=\"md\"\n  //         >\n  //           {option.optionName}\n  //         </Button>)}\n  //   </div>\n  //   <div className='flex flex-row justify-center my-[50px]'>\n  //     {questionIndex < questions.length-1 ? <Button size=\"md\" disabled={answered} onClick={()=>nextQuestion()}>Next</Button>: <Button size=\"md\" disabled={answered} onClick={()=>endQuiz()}>Finish</Button>}\n  //   </div>  \n  // </div>\n  ;\n}\n\n_s(QuizGame, \"mV3l8W7nusTM04JOZXxlRC36Wcc=\");\n\n_c = QuizGame;\nexport default QuizGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizGame\");","map":{"version":3,"names":["React","useState","QuizGame","questions","endQuiz","console","log","questionIndex","setQuestionIndex","answered","setAnswered","colors","setColors","nextQuestion","answerQuestion","index","newColors","options","correct","question"],"sources":["/Users/seancoleman/Projects/kanji/client/src/components/QuizGame.tsx"],"sourcesContent":["import React,{useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport QuizAnswerButton from './QuizAnswerButton'\n\nimport FetchKanji from '../hooks/FetchKanji'\n\nimport {Button} from '@mantine/core'\n\nexport interface QuizGameProps {\n  questions: Question[]\n  endQuiz: Function\n}\n\nexport interface Question{\n  question: string[]\n  options: OptionProps[]\n}\n\nexport interface OptionProps {\n  correct: boolean\n  optionName: string\n}\n\nfunction QuizGame({questions, endQuiz}:QuizGameProps) {\n  console.log(questions)\n  const [questionIndex,setQuestionIndex]=useState(0)\n  const [answered,setAnswered]=useState(true)\n  const [colors,setColors]=useState([\"blue\",\"blue\",\"blue\",\"blue\"])\n\n\n  const nextQuestion = () => {\n    setQuestionIndex(questionIndex+1)\n    setAnswered(true)\n    setColors([\"blue\",\"blue\",\"blue\",\"blue\"])\n  }\n\n  const answerQuestion = (index:number) => {\n    if(answered){\n      \n      setAnswered(false)\n      let newColors = colors\n      if(questions[questionIndex].options[index].correct)\n        newColors[index] = \"green\"\n      else\n        newColors[index] = \"red\"\n\n      setColors(newColors)\n    }\n  }\n\n  return (\n    <p>{questions[0].question[0]}</p>\n    // <div className=\"mx-auto w-[70%]\">\n    //   <p>{questions[questionIndex].question}</p>\n    //   <div className=\"grid grid-cols-2 gap-4\">\n    //     {questions[questionIndex].options.map((option,index)=> \n    //       <Button \n    //         onClick={()=>(answerQuestion(index))}\n    //         color={colors[index]}\n    //         key={index}\n    //         size=\"md\"\n    //         >\n    //           {option.optionName}\n    //         </Button>)}\n    //   </div>\n\n    //   <div className='flex flex-row justify-center my-[50px]'>\n    //     {questionIndex < questions.length-1 ? <Button size=\"md\" disabled={answered} onClick={()=>nextQuestion()}>Next</Button>: <Button size=\"md\" disabled={answered} onClick={()=>endQuiz()}>Finish</Button>}\n\n    //   </div>  \n    // </div>\n )\n}\n\nexport default QuizGame\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;;;AAuBA,SAASC,QAAT,OAAsD;EAAA;;EAAA,IAApC;IAACC,SAAD;IAAYC;EAAZ,CAAoC;EACpDC,OAAO,CAACC,GAAR,CAAYH,SAAZ;EACA,MAAM,CAACI,aAAD,EAAeC,gBAAf,IAAiCP,QAAQ,CAAC,CAAD,CAA/C;EACA,MAAM,CAACQ,QAAD,EAAUC,WAAV,IAAuBT,QAAQ,CAAC,IAAD,CAArC;EACA,MAAM,CAACU,MAAD,EAAQC,SAAR,IAAmBX,QAAQ,CAAC,CAAC,MAAD,EAAQ,MAAR,EAAe,MAAf,EAAsB,MAAtB,CAAD,CAAjC;;EAGA,MAAMY,YAAY,GAAG,MAAM;IACzBL,gBAAgB,CAACD,aAAa,GAAC,CAAf,CAAhB;IACAG,WAAW,CAAC,IAAD,CAAX;IACAE,SAAS,CAAC,CAAC,MAAD,EAAQ,MAAR,EAAe,MAAf,EAAsB,MAAtB,CAAD,CAAT;EACD,CAJD;;EAMA,MAAME,cAAc,GAAIC,KAAD,IAAkB;IACvC,IAAGN,QAAH,EAAY;MAEVC,WAAW,CAAC,KAAD,CAAX;MACA,IAAIM,SAAS,GAAGL,MAAhB;MACA,IAAGR,SAAS,CAACI,aAAD,CAAT,CAAyBU,OAAzB,CAAiCF,KAAjC,EAAwCG,OAA3C,EACEF,SAAS,CAACD,KAAD,CAAT,GAAmB,OAAnB,CADF,KAGEC,SAAS,CAACD,KAAD,CAAT,GAAmB,KAAnB;MAEFH,SAAS,CAACI,SAAD,CAAT;IACD;EACF,CAZD;;EAcA,oBACE;IAAA,UAAIb,SAAS,CAAC,CAAD,CAAT,CAAagB,QAAb,CAAsB,CAAtB;EAAJ;IAAA;IAAA;IAAA;EAAA,QADF,CAEE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EApBF;AAsBD;;GAjDQjB,Q;;KAAAA,Q;AAmDT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}