{"ast":null,"code":"function groupOptions(_ref) {\n  let {\n    data\n  } = _ref;\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n\n    return acc;\n  }, {});\n  Object.keys(groupedData).forEach(groupName => {\n    sortedData.push(...groupedData[groupName].map(index => data[index]));\n  });\n  sortedData.push(...unGroupedData.map(itemIndex => data[itemIndex]));\n  return sortedData;\n}\n\nfunction getGroupedOptions(data) {\n  const sorted = groupOptions({\n    data\n  });\n  const unGrouped = [];\n  const grouped = [];\n  let groupName = null;\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({\n        type: \"item\",\n        item,\n        index\n      });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({\n          type: \"label\",\n          label: groupName\n        });\n      }\n\n      grouped.push({\n        type: \"item\",\n        item,\n        index\n      });\n    }\n  });\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0\n  };\n}\n\nexport { getGroupedOptions, groupOptions };","map":{"version":3,"mappings":"AAAO,SAASA,YAAT,OAAgC;EAAA,IAAV;IAAEC;EAAF,CAAU;EACrC,MAAMC,UAAU,GAAG,EAAnB;EACA,MAAMC,aAAa,GAAG,EAAtB;EACA,MAAMC,WAAW,GAAGH,IAAI,CAACI,MAAL,CAAY,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,KAAsB;IACpD,IAAID,IAAI,CAACE,KAAT,EAAgB;MACd,IAAIH,GAAG,CAACC,IAAI,CAACE,KAAN,CAAP,EACEH,GAAG,CAACC,IAAI,CAACE,KAAN,CAAH,CAAgBC,IAAhB,CAAqBF,KAArB,EADF,KAGEF,GAAG,CAACC,IAAI,CAACE,KAAN,CAAH,GAAkB,CAACD,KAAD,CAAlB;IACH,CALD,MAKO;MACLL,aAAa,CAACO,IAAd,CAAmBF,KAAnB;IACD;;IACD,OAAOF,GAAP;EACD,CAVmB,EAUjB,EAViB,CAApB;EAWAK,MAAM,CAACC,IAAP,CAAYR,WAAZ,EAAyBS,OAAzB,CAAkCC,SAAD,IAAe;IAC9CZ,UAAU,CAACQ,IAAX,CAAgB,GAAGN,WAAW,CAACU,SAAD,CAAX,CAAuBC,GAAvB,CAA4BP,KAAD,IAAWP,IAAI,CAACO,KAAD,CAA1C,CAAnB;EACD,CAFD;EAGAN,UAAU,CAACQ,IAAX,CAAgB,GAAGP,aAAa,CAACY,GAAd,CAAmBC,SAAD,IAAef,IAAI,CAACe,SAAD,CAArC,CAAnB;EACA,OAAOd,UAAP;AACD;;AACM,SAASe,iBAAT,CAA2BhB,IAA3B,EAAiC;EACtC,MAAMiB,MAAM,GAAGlB,YAAY,CAAC;IAAEC;EAAF,CAAD,CAA3B;EACA,MAAMkB,SAAS,GAAG,EAAlB;EACA,MAAMC,OAAO,GAAG,EAAhB;EACA,IAAIN,SAAS,GAAG,IAAhB;EACAI,MAAM,CAACL,OAAP,CAAe,CAACN,IAAD,EAAOC,KAAP,KAAiB;IAC9B,IAAI,CAACD,IAAI,CAACE,KAAV,EAAiB;MACfU,SAAS,CAACT,IAAV,CAAe;QAAEW,IAAI,EAAE,MAAR;QAAgBd,IAAhB;QAAsBC;MAAtB,CAAf;IACD,CAFD,MAEO;MACL,IAAIM,SAAS,KAAKP,IAAI,CAACE,KAAvB,EAA8B;QAC5BK,SAAS,GAAGP,IAAI,CAACE,KAAjB;QACAW,OAAO,CAACV,IAAR,CAAa;UAAEW,IAAI,EAAE,OAAR;UAAiBC,KAAK,EAAER;QAAxB,CAAb;MACD;;MACDM,OAAO,CAACV,IAAR,CAAa;QAAEW,IAAI,EAAE,MAAR;QAAgBd,IAAhB;QAAsBC;MAAtB,CAAb;IACD;EACF,CAVD;EAWA,OAAO;IACLY,OADK;IAELD,SAFK;IAGLI,KAAK,EAAE,CAAC,GAAGH,OAAJ,EAAa,GAAGD,SAAhB,CAHF;IAILK,QAAQ,EAAEJ,OAAO,CAACK,MAAR,GAAiB,CAAjB,IAAsBN,SAAS,CAACM,MAAV,GAAmB;EAJ9C,CAAP;AAMF","names":["groupOptions","data","sortedData","unGroupedData","groupedData","reduce","acc","item","index","group","push","Object","keys","forEach","groupName","map","itemIndex","getGroupedOptions","sorted","unGrouped","grouped","type","label","items","hasItems","length"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/core/src/utils/group-options/group-options.ts"],"sourcesContent":["interface GroupData {\n  data: { group?: string }[];\n}\n\nexport function groupOptions({ data }: GroupData) {\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);\n      else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n\n  Object.keys(groupedData).forEach((groupName) => {\n    sortedData.push(...groupedData[groupName].map((index) => data[index]));\n  });\n\n  sortedData.push(...unGroupedData.map((itemIndex) => data[itemIndex]));\n\n  return sortedData;\n}\n\nexport function getGroupedOptions<T extends any[]>(data: T) {\n  type Item = { type: 'item'; item: T[number]; index: number };\n  type Label = { type: 'label'; label: string };\n\n  const sorted = groupOptions({ data });\n  const unGrouped: Item[] = [];\n  const grouped: (Item | Label)[] = [];\n  let groupName = null;\n\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({ type: 'item', item, index });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({ type: 'label', label: groupName });\n      }\n      grouped.push({ type: 'item', item, index });\n    }\n  });\n\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}