{"ast":null,"code":"import * as e from \"react\";\nexport function useCallbackRef(r) {\n  const t = e.useRef(r);\n  return e.useEffect(() => {\n    t.current = r;\n  }), e.useMemo(() => function () {\n    var r;\n\n    for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n      e[_key] = arguments[_key];\n    }\n\n    return null === (r = t.current) || void 0 === r ? void 0 : r.call(t, ...e);\n  }, []);\n}","map":{"version":3,"mappings":";OAMA,SAASA,cAAT,CAA2DC,CAA3D,EAA2DA;EACzD,MAAMC,IAAcC,EAAMC,MAAND,CAAaF,CAAbE,CAApB;EAOA,OALAA,EAAME,SAANF,CAAgB;IACdD,EAAYI,OAAZJ,GAAsBD,CAAtBC;EAAsBD,CADxBE,GAKOA,EAAMI,OAANJ,CAAc,MAAO,YAAIK;IAAJ;;IAAIA;MAAAA;IAAAA;;IAAJ,qBAAaN,EAAYI,OAAzB,KAAyBA,KAAzB,CAAyBA,KAAzBG,aAAaA,aAAyBD,CAAzBC,CAAb;EAAsCD,CAA3DL,EAAwE,EAAxEA,CAAP;AAA+E","names":["useCallbackRef","callback","callbackRef","React","useRef","useEffect","current","useMemo","args","_callbackRef$current"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@radix-ui/react-use-callback-ref/dist/packages/react/use-callback-ref/src/useCallbackRef.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n"]},"metadata":{},"sourceType":"module"}