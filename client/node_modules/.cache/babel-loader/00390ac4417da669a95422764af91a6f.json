{"ast":null,"code":"import { useState } from 'react';\n\nfunction useSelectionState() {\n  let initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n  const [selection, setSelection] = useState(initialSelection);\n\n  const handleSelect = (listIndex, value) => setSelection(currentSelection => {\n    const listSelection = currentSelection[listIndex];\n    let result = listSelection;\n\n    if (typeof value === \"string\") {\n      if (listSelection.includes(value)) {\n        result = listSelection.filter(item => item !== value);\n      } else {\n        result = [...listSelection, value];\n      }\n    }\n\n    const clone = [...currentSelection];\n    clone[listIndex] = result;\n    return clone;\n  });\n\n  const handleDeselect = (listIndex, values) => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = currentSelection[listIndex].filter(item => !values.includes(item));\n    return clone;\n  });\n\n  const handleDeselectAll = listIndex => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = [];\n    return clone;\n  });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\n\nexport { useSelectionState };","map":{"version":3,"mappings":";;AACO,SAASA,iBAAT,GAAwD;EAAA,IAA7BC,gBAA6B,uEAAV,CAAC,EAAD,EAAK,EAAL,CAAU;EAC7D,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAACH,gBAAD,CAA1C;;EACA,MAAMI,YAAY,GAAG,CAACC,SAAD,EAAYC,KAAZ,KAAsBJ,YAAY,CAAEK,gBAAD,IAAsB;IAC5E,MAAMC,aAAa,GAAGD,gBAAgB,CAACF,SAAD,CAAtC;IACA,IAAII,MAAM,GAAGD,aAAb;;IACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;MAC7B,IAAIE,aAAa,CAACE,QAAd,CAAuBJ,KAAvB,CAAJ,EAAmC;QACjCG,MAAM,GAAGD,aAAa,CAACG,MAAd,CAAsBC,IAAD,IAAUA,IAAI,KAAKN,KAAxC,CAAT;MACD,CAFD,MAEO;QACLG,MAAM,GAAG,CAAC,GAAGD,aAAJ,EAAmBF,KAAnB,CAAT;MACD;IACF;;IACD,MAAMO,KAAK,GAAG,CAAC,GAAGN,gBAAJ,CAAd;IACAM,KAAK,CAACR,SAAD,CAAL,GAAmBI,MAAnB;IACA,OAAOI,KAAP;EACD,CAbsD,CAAvD;;EAcA,MAAMC,cAAc,GAAG,CAACT,SAAD,EAAYU,MAAZ,KAAuBb,YAAY,CAAEK,gBAAD,IAAsB;IAC/E,MAAMM,KAAK,GAAG,CAAC,GAAGN,gBAAJ,CAAd;IACAM,KAAK,CAACR,SAAD,CAAL,GAAmBE,gBAAgB,CAACF,SAAD,CAAhB,CAA4BM,MAA5B,CAAoCC,IAAD,IAAU,CAACG,MAAM,CAACL,QAAP,CAAgBE,IAAhB,CAA9C,CAAnB;IACA,OAAOC,KAAP;EACD,CAJyD,CAA1D;;EAKA,MAAMG,iBAAiB,GAAIX,SAAD,IAAeH,YAAY,CAAEK,gBAAD,IAAsB;IAC1E,MAAMM,KAAK,GAAG,CAAC,GAAGN,gBAAJ,CAAd;IACAM,KAAK,CAACR,SAAD,CAAL,GAAmB,EAAnB;IACA,OAAOQ,KAAP;EACD,CAJoD,CAArD;;EAKA,MAAMI,QAAQ,GAAG;IACfC,MAAM,EAAEd,YADO;IAEfe,QAAQ,EAAEL,cAFK;IAGfM,WAAW,EAAEJ;EAHE,CAAjB;EAKA,OAAO,CAACf,SAAD,EAAYgB,QAAZ,CAAP;AACF","names":["useSelectionState","initialSelection","selection","setSelection","useState","handleSelect","listIndex","value","currentSelection","listSelection","result","includes","filter","item","clone","handleDeselect","values","handleDeselectAll","handlers","select","deselect","deselectAll"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@mantine/core/src/components/TransferList/use-selection-state/use-selection-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport type Selection = [string[], string[]];\n\nexport function useSelectionState(initialSelection: Selection = [[], []]) {\n  const [selection, setSelection] = useState<Selection>(initialSelection);\n\n  const handleSelect = (listIndex: 0 | 1, value: string) =>\n    setSelection((currentSelection) => {\n      const listSelection = currentSelection[listIndex];\n      let result = listSelection;\n\n      if (typeof value === 'string') {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter((item) => item !== value);\n        } else {\n          result = [...listSelection, value];\n        }\n      }\n\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = result;\n      return clone;\n    });\n\n  const handleDeselect = (listIndex: 0 | 1, values: string[]) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = currentSelection[listIndex].filter((item) => !values.includes(item));\n      return clone;\n    });\n\n  const handleDeselectAll = (listIndex: 0 | 1) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = [];\n      return clone;\n    });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll,\n  };\n\n  return [selection, handlers] as const;\n}\n"]},"metadata":{},"sourceType":"module"}