{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem } from \"../menu/menuItem\";\nimport { Popover } from \"../popover/popover\";\n/** @deprecated use `<OverflowList>` for automatic overflow based on available space. */\n\nvar CollapsibleList =\n/** @class */\nfunction (_super) {\n  __extends(CollapsibleList, _super);\n\n  function CollapsibleList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CollapsibleList.prototype.render = function () {\n    var _this = this;\n\n    var collapseFrom = this.props.collapseFrom;\n    var childrenLength = React.Children.count(this.props.children);\n\n    var _a = this.partitionChildren(),\n        visibleChildren = _a[0],\n        collapsedChildren = _a[1];\n\n    var visibleItems = visibleChildren.map(function (child, index) {\n      var absoluteIndex = collapseFrom === Boundary.START ? childrenLength - 1 - index : index;\n      return React.createElement(\"li\", {\n        className: _this.props.visibleItemClassName,\n        key: absoluteIndex\n      }, _this.props.visibleItemRenderer(child.props, absoluteIndex));\n    });\n\n    if (collapseFrom === Boundary.START) {\n      // reverse START list so separators appear before items\n      visibleItems.reverse();\n    } // construct dropdown menu for collapsed items\n\n\n    var collapsedPopover;\n\n    if (collapsedChildren.length > 0) {\n      var position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n      /* eslint-disable deprecation/deprecation */\n\n      collapsedPopover = React.createElement(\"li\", {\n        className: this.props.visibleItemClassName\n      }, React.createElement(Popover, __assign({\n        content: React.createElement(Menu, null, collapsedChildren),\n        position: position\n      }, this.props.dropdownProps), this.props.dropdownTarget));\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return React.createElement(\"ul\", {\n      className: classNames(Classes.COLLAPSIBLE_LIST, this.props.className)\n    }, collapseFrom === Boundary.START ? collapsedPopover : null, visibleItems, collapseFrom === Boundary.END ? collapsedPopover : null);\n  }; // splits the list of children into two arrays: visible and collapsed\n\n\n  CollapsibleList.prototype.partitionChildren = function () {\n    var childrenArray = React.Children.map(this.props.children, function (child, index) {\n      if (!isElementOfType(child, MenuItem)) {\n        throw new Error(Errors.COLLAPSIBLE_LIST_INVALID_CHILD);\n      }\n\n      return React.cloneElement(child, {\n        key: \"visible-\".concat(index)\n      });\n    });\n\n    if (childrenArray == null) {\n      return [[], []];\n    }\n\n    if (this.props.collapseFrom === Boundary.START) {\n      // reverse START list so we can always slice visible items from the front of the list\n      childrenArray.reverse();\n    }\n\n    var visibleItemCount = this.props.visibleItemCount;\n    return [childrenArray.slice(0, visibleItemCount), childrenArray.slice(visibleItemCount)];\n  };\n\n  CollapsibleList.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".CollapsibleList\");\n  CollapsibleList.defaultProps = {\n    collapseFrom: Boundary.START,\n    visibleItemCount: 3\n  };\n  return CollapsibleList;\n}(React.Component);\n\nexport { CollapsibleList };","map":{"version":3,"mappings":"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","names":["classNames","React","Boundary","Classes","Errors","Position","DISPLAYNAME_PREFIX","isElementOfType","Menu","MenuItem","Popover","__extends","CollapsibleList","props","collapseFrom","childrenLength","Children","count","children","partitionChildren","visibleChildren","collapsedChildren","visibleItems","map","child","index","absoluteIndex","START","className","_this","visibleItemClassName","key","visibleItemRenderer","reverse","collapsedPopover","length","position","END","BOTTOM_RIGHT","BOTTOM_LEFT","__assign","content","dropdownProps","dropdownTarget","COLLAPSIBLE_LIST","childrenArray","Error","COLLAPSIBLE_LIST_INVALID_CHILD","cloneElement","visibleItemCount","slice","Component"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/collapsible-list/collapsibleList.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem, MenuItemProps } from \"../menu/menuItem\";\nimport { IPopoverProps, Popover } from \"../popover/popover\";\n\ntype CollapsibleItem = React.ReactElement<MenuItemProps>;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type CollapsibleListProps = ICollapsibleListProps;\n/** @deprecated use CollapsibleListProps */\nexport interface ICollapsibleListProps extends Props {\n    /** Contents to collapse. */\n    children: React.ReactNode;\n\n    /**\n     * Element to render as dropdown target with `CLICK` interaction to show collapsed menu.\n     */\n    dropdownTarget: JSX.Element;\n\n    /**\n     * Props to pass to the dropdown.\n     */\n    dropdownProps?: IPopoverProps;\n\n    /**\n     * Callback invoked to render each visible item. The item will be wrapped in an `li` with\n     * the optional `visibleItemClassName` prop.\n     */\n    visibleItemRenderer: (props: MenuItemProps, index: number) => JSX.Element;\n\n    /**\n     * Which direction the items should collapse from: start or end of the children.\n     *\n     * @default Boundary.START\n     */\n    collapseFrom?: Boundary;\n\n    /**\n     * CSS class names to add to `<li>` tags containing each visible item and the dropdown.\n     */\n    visibleItemClassName?: string;\n\n    /**\n     * Exact number of visible items.\n     *\n     * @default 3\n     */\n    visibleItemCount?: number;\n}\n\n/** @deprecated use `<OverflowList>` for automatic overflow based on available space. */\nexport class CollapsibleList extends React.Component<CollapsibleListProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.CollapsibleList`;\n\n    public static defaultProps: Partial<CollapsibleListProps> = {\n        collapseFrom: Boundary.START,\n        visibleItemCount: 3,\n    };\n\n    public render() {\n        const { collapseFrom } = this.props;\n        const childrenLength = React.Children.count(this.props.children);\n        const [visibleChildren, collapsedChildren] = this.partitionChildren();\n\n        const visibleItems = visibleChildren.map((child: CollapsibleItem, index: number) => {\n            const absoluteIndex = collapseFrom === Boundary.START ? childrenLength - 1 - index : index;\n            return (\n                <li className={this.props.visibleItemClassName} key={absoluteIndex}>\n                    {this.props.visibleItemRenderer(child.props, absoluteIndex)}\n                </li>\n            );\n        });\n        if (collapseFrom === Boundary.START) {\n            // reverse START list so separators appear before items\n            visibleItems.reverse();\n        }\n\n        // construct dropdown menu for collapsed items\n        let collapsedPopover: JSX.Element | undefined;\n        if (collapsedChildren.length > 0) {\n            const position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n            /* eslint-disable deprecation/deprecation */\n            collapsedPopover = (\n                <li className={this.props.visibleItemClassName}>\n                    <Popover\n                        content={<Menu>{collapsedChildren}</Menu>}\n                        position={position}\n                        {...this.props.dropdownProps}\n                    >\n                        {this.props.dropdownTarget}\n                    </Popover>\n                </li>\n            );\n            /* eslint-enable deprecation/deprecation */\n        }\n\n        return (\n            <ul className={classNames(Classes.COLLAPSIBLE_LIST, this.props.className)}>\n                {collapseFrom === Boundary.START ? collapsedPopover : null}\n                {visibleItems}\n                {collapseFrom === Boundary.END ? collapsedPopover : null}\n            </ul>\n        );\n    }\n\n    // splits the list of children into two arrays: visible and collapsed\n    private partitionChildren(): [CollapsibleItem[], CollapsibleItem[]] {\n        const childrenArray = React.Children.map(this.props.children, (child: React.ReactNode, index: number) => {\n            if (!isElementOfType(child, MenuItem)) {\n                throw new Error(Errors.COLLAPSIBLE_LIST_INVALID_CHILD);\n            }\n            return React.cloneElement(child as JSX.Element, { key: `visible-${index}` });\n        });\n\n        if (childrenArray == null) {\n            return [[], []];\n        }\n\n        if (this.props.collapseFrom === Boundary.START) {\n            // reverse START list so we can always slice visible items from the front of the list\n            childrenArray.reverse();\n        }\n        const { visibleItemCount } = this.props;\n        return [childrenArray.slice(0, visibleItemCount), childrenArray.slice(visibleItemCount)];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}