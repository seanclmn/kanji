{"ast":null,"code":"import * as o from \"react\";\nexport function composeRefs() {\n  for (var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++) {\n    o[_key] = arguments[_key];\n  }\n\n  return e => o.forEach(o => function (o, e) {\n    \"function\" == typeof o ? o(e) : null != o && (o.current = e);\n  }(o, e));\n}\nexport function useComposedRefs() {\n  for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    e[_key2] = arguments[_key2];\n  }\n\n  return o.useCallback(composeRefs(...e), e);\n}","map":{"version":3,"mappings":";OAoBA,SAASA,WAAT,GAA2BC;EAAAA;IAAAA;EAAAA;;EACzB,OAAQC,KAAYD,EAAKE,OAALF,CAAcG,KAbpC,UAAmBA,CAAnB,EAAwCC,CAAxC,EAAwCA;IACnB,qBAARD,CAAQ,GACjBA,EAAIC,CAAJD,CADiB,GAERA,cACRA,EAAkCE,OAAlCF,GAA4CC,CADpCD,CAFQ;EAYuBG,CAb5C,CAamDH,CAbnD,EAawDF,CAbxD,CAasBD,CAApB;AAAsDC;AAAAA,OAOxD,SAASM,eAAT,GAA+BP;EAAAA;IAAAA;EAAAA;;EAE7B,OAAOQ,EAAMC,WAAND,CAAkBT,eAAeC,CAAfD,CAAlBS,EAAwCR,CAAxCQ,CAAP;AAA+CR","names":["composeRefs","refs","node","forEach","ref","value","current","setRef","useComposedRefs","React","useCallback"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@radix-ui/react-compose-refs/dist/packages/react/compose-refs/src/composeRefs.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"]},"metadata":{},"sourceType":"module"}