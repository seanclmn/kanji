{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, Keys, Utils } from \"../../common\";\nimport { Icon, IconSize } from \"../icon/icon\";\nimport { Spinner } from \"../spinner/spinner\";\n\nvar AbstractButton =\n/** @class */\nfunction (_super) {\n  __extends(AbstractButton, _super);\n\n  function AbstractButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isActive: false\n    }; // we're casting as `any` to get around a somewhat opaque safeInvoke error\n    // that \"Type argument candidate 'KeyboardEvent<T>' is not a valid type\n    // argument because it is not a supertype of candidate\n    // 'KeyboardEvent<HTMLElement>'.\"\n\n    _this.handleKeyDown = function (e) {\n      var _a, _b; // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable deprecation/deprecation */\n\n\n      if (Keys.isKeyboardClick(e.which)) {\n        e.preventDefault();\n\n        if (e.which !== _this.currentKeyDown) {\n          _this.setState({\n            isActive: true\n          });\n        }\n      }\n\n      _this.currentKeyDown = e.which;\n      (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleKeyUp = function (e) {\n      var _a, _b, _c; // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable deprecation/deprecation */\n\n\n      if (Keys.isKeyboardClick(e.which)) {\n        _this.setState({\n          isActive: false\n        });\n\n        (_a = _this.buttonRef) === null || _a === void 0 ? void 0 : _a.click();\n      }\n\n      _this.currentKeyDown = undefined;\n      (_c = (_b = _this.props).onKeyUp) === null || _c === void 0 ? void 0 : _c.call(_b, e);\n    };\n\n    _this.handleBlur = function (e) {\n      var _a, _b;\n\n      if (_this.state.isActive) {\n        _this.setState({\n          isActive: false\n        });\n      }\n\n      (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    return _this;\n  }\n\n  AbstractButton.prototype.getCommonButtonProps = function () {\n    var _a;\n\n    var _b;\n\n    var _c = this.props,\n        active = _c.active,\n        alignText = _c.alignText,\n        fill = _c.fill,\n        large = _c.large,\n        _d = _c.loading,\n        loading = _d === void 0 ? false : _d,\n        outlined = _c.outlined,\n        minimal = _c.minimal,\n        small = _c.small,\n        tabIndex = _c.tabIndex;\n    var disabled = (_b = this.props.disabled) !== null && _b !== void 0 ? _b : loading;\n    var className = classNames(Classes.BUTTON, (_a = {}, _a[Classes.ACTIVE] = !disabled && (active || this.state.isActive), _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.LOADING] = loading, _a[Classes.MINIMAL] = minimal, _a[Classes.OUTLINED] = outlined, _a[Classes.SMALL] = small, _a), Classes.alignmentClass(alignText), Classes.intentClass(this.props.intent), this.props.className);\n    return {\n      className: className,\n      disabled: disabled,\n      onBlur: this.handleBlur,\n      onClick: disabled ? undefined : this.props.onClick,\n      onKeyDown: this.handleKeyDown,\n      onKeyUp: this.handleKeyUp,\n      tabIndex: disabled ? -1 : tabIndex\n    };\n  };\n\n  AbstractButton.prototype.renderChildren = function () {\n    var _a = this.props,\n        children = _a.children,\n        icon = _a.icon,\n        loading = _a.loading,\n        rightIcon = _a.rightIcon,\n        text = _a.text;\n    var maybeHasText = !Utils.isReactNodeEmpty(text) || !Utils.isReactNodeEmpty(children);\n    return [loading && React.createElement(Spinner, {\n      key: \"loading\",\n      className: Classes.BUTTON_SPINNER,\n      size: IconSize.LARGE\n    }), // The icon is purely decorative if text is provided\n    React.createElement(Icon, {\n      key: \"leftIcon\",\n      icon: icon,\n      \"aria-hidden\": maybeHasText,\n      tabIndex: maybeHasText ? -1 : undefined\n    }), maybeHasText && React.createElement(\"span\", {\n      key: \"text\",\n      className: Classes.BUTTON_TEXT\n    }, text, children), React.createElement(Icon, {\n      key: \"rightIcon\",\n      icon: rightIcon\n    })];\n  };\n\n  return AbstractButton;\n}(AbstractPureComponent2);\n\nexport { AbstractButton };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Keys","Utils","Icon","IconSize","Spinner","__extends","_this","isActive","e","isKeyboardClick","which","preventDefault","currentKeyDown","setState","props","onKeyDown","_b","buttonRef","_a","click","undefined","onKeyUp","_c","state","onBlur","AbstractButton","active","alignText","fill","large","_d","loading","outlined","minimal","small","tabIndex","disabled","className","BUTTON","ACTIVE","DISABLED","FILL","LARGE","LOADING","MINIMAL","OUTLINED","SMALL","alignmentClass","intentClass","intent","handleBlur","onClick","handleKeyDown","handleKeyUp","children","icon","rightIcon","text","maybeHasText","isReactNodeEmpty","key","BUTTON_SPINNER","size","BUTTON_TEXT"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/button/abstractButton.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    ActionProps,\n    Alignment,\n    Classes,\n    IElementRefProps,\n    Keys,\n    MaybeElement,\n    Utils,\n} from \"../../common\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { Spinner } from \"../spinner/spinner\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type ButtonProps<E extends HTMLButtonElement | HTMLAnchorElement = HTMLButtonElement> = IButtonProps<E>;\n/** @deprecated use ButtonProps */\nexport interface IButtonProps<E extends HTMLButtonElement | HTMLAnchorElement = HTMLButtonElement>\n    extends ActionProps,\n        // eslint-disable-next-line deprecation/deprecation\n        IElementRefProps<E> {\n    /**\n     * If set to `true`, the button will display in an active state.\n     * This is equivalent to setting `className={Classes.ACTIVE}`.\n     *\n     * @default false\n     */\n    active?: boolean;\n\n    /**\n     * Text alignment within button. By default, icons and text will be centered\n     * within the button. Passing `\"left\"` or `\"right\"` will align the button\n     * text to that side and push `icon` and `rightIcon` to either edge. Passing\n     * `\"center\"` will center the text and icons together.\n     *\n     * @default Alignment.CENTER\n     */\n    alignText?: Alignment;\n\n    /** Button contents. */\n    children?: React.ReactNode;\n\n    /** Whether this button should expand to fill its container. */\n    fill?: boolean;\n\n    /** Whether this button should use large styles. */\n    large?: boolean;\n\n    /**\n     * If set to `true`, the button will display a centered loading spinner instead of its contents, and the button will be disabled.\n     * The width of the button is not affected by the value of this prop.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /** Whether this button should use minimal styles. */\n    minimal?: boolean;\n\n    /** Whether this button should use outlined styles. */\n    outlined?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render after the text. */\n    rightIcon?: IconName | MaybeElement;\n\n    /** Whether this button should use small styles. */\n    small?: boolean;\n\n    /**\n     * HTML `type` attribute of button. Accepted values are `\"button\"`, `\"submit\"`, and `\"reset\"`.\n     * Note that this prop has no effect on `AnchorButton`; it only affects `Button`.\n     *\n     * @default \"button\"\n     */\n    type?: \"submit\" | \"reset\" | \"button\";\n}\n\n/** @deprecated use AnchorButtonProps */\nexport type IAnchorButtonProps = ButtonProps<HTMLAnchorElement>;\n// eslint-disable-next-line deprecation/deprecation\nexport type AnchorButtonProps = IAnchorButtonProps;\n\nexport interface IButtonState {\n    isActive: boolean;\n}\n\nexport abstract class AbstractButton<E extends HTMLButtonElement | HTMLAnchorElement> extends AbstractPureComponent2<\n    ButtonProps<E> &\n        (E extends HTMLButtonElement\n            ? React.ButtonHTMLAttributes<HTMLButtonElement>\n            : React.AnchorHTMLAttributes<HTMLAnchorElement>),\n    IButtonState\n> {\n    public state = {\n        isActive: false,\n    };\n\n    protected abstract buttonRef: HTMLElement | null;\n\n    private currentKeyDown?: number;\n\n    public abstract render(): JSX.Element;\n\n    protected getCommonButtonProps() {\n        const { active, alignText, fill, large, loading = false, outlined, minimal, small, tabIndex } = this.props;\n        const disabled = this.props.disabled ?? loading;\n\n        const className = classNames(\n            Classes.BUTTON,\n            {\n                [Classes.ACTIVE]: !disabled && (active || this.state.isActive),\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.LOADING]: loading,\n                [Classes.MINIMAL]: minimal,\n                [Classes.OUTLINED]: outlined,\n                [Classes.SMALL]: small,\n            },\n            Classes.alignmentClass(alignText),\n            Classes.intentClass(this.props.intent),\n            this.props.className,\n        );\n\n        return {\n            className,\n            disabled,\n            onBlur: this.handleBlur,\n            onClick: disabled ? undefined : this.props.onClick,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            tabIndex: disabled ? -1 : tabIndex,\n        };\n    }\n\n    // we're casting as `any` to get around a somewhat opaque safeInvoke error\n    // that \"Type argument candidate 'KeyboardEvent<T>' is not a valid type\n    // argument because it is not a supertype of candidate\n    // 'KeyboardEvent<HTMLElement>'.\"\n    protected handleKeyDown = (e: React.KeyboardEvent<any>) => {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable deprecation/deprecation */\n        if (Keys.isKeyboardClick(e.which)) {\n            e.preventDefault();\n            if (e.which !== this.currentKeyDown) {\n                this.setState({ isActive: true });\n            }\n        }\n        this.currentKeyDown = e.which;\n        this.props.onKeyDown?.(e);\n    };\n\n    protected handleKeyUp = (e: React.KeyboardEvent<any>) => {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable deprecation/deprecation */\n        if (Keys.isKeyboardClick(e.which)) {\n            this.setState({ isActive: false });\n            this.buttonRef?.click();\n        }\n        this.currentKeyDown = undefined;\n        this.props.onKeyUp?.(e);\n    };\n\n    protected handleBlur = (e: React.FocusEvent<any>) => {\n        if (this.state.isActive) {\n            this.setState({ isActive: false });\n        }\n        this.props.onBlur?.(e);\n    };\n\n    protected renderChildren(): React.ReactNode {\n        const { children, icon, loading, rightIcon, text } = this.props;\n        const maybeHasText = !Utils.isReactNodeEmpty(text) || !Utils.isReactNodeEmpty(children);\n        return [\n            loading && <Spinner key=\"loading\" className={Classes.BUTTON_SPINNER} size={IconSize.LARGE} />,\n            // The icon is purely decorative if text is provided\n            <Icon key=\"leftIcon\" icon={icon} aria-hidden={maybeHasText} tabIndex={maybeHasText ? -1 : undefined} />,\n            maybeHasText && (\n                <span key=\"text\" className={Classes.BUTTON_TEXT}>\n                    {text}\n                    {children}\n                </span>\n            ),\n            <Icon key=\"rightIcon\" icon={rightIcon} />,\n        ];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}