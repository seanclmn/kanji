{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\nexport var SpinnerSize;\n\n(function (SpinnerSize) {\n  SpinnerSize[SpinnerSize[\"SMALL\"] = 20] = \"SMALL\";\n  SpinnerSize[SpinnerSize[\"STANDARD\"] = 50] = \"STANDARD\";\n  SpinnerSize[SpinnerSize[\"LARGE\"] = 100] = \"LARGE\";\n})(SpinnerSize || (SpinnerSize = {})); // see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\n\n\nvar R = 45;\nvar SPINNER_TRACK = \"M 50,50 m 0,-\".concat(R, \" a \").concat(R, \",\").concat(R, \" 0 1 1 0,\").concat(R * 2, \" a \").concat(R, \",\").concat(R, \" 0 1 1 0,-\").concat(R * 2); // unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\n\nvar PATH_LENGTH = 280;\nvar MIN_SIZE = 10;\nvar STROKE_WIDTH = 4;\nvar MIN_STROKE_WIDTH = 16;\n\nvar Spinner =\n/** @class */\nfunction (_super) {\n  __extends(Spinner, _super);\n\n  function Spinner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Spinner.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.value !== this.props.value) {\n      // IE/Edge: re-render after changing value to force SVG update\n      this.forceUpdate();\n    }\n  };\n\n  Spinner.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        intent = _b.intent,\n        value = _b.value,\n        _c = _b.tagName,\n        tagName = _c === void 0 ? \"div\" : _c,\n        htmlProps = __rest(_b, [\"className\", \"intent\", \"value\", \"tagName\"]);\n\n    var size = this.getSize();\n    var classes = classNames(Classes.SPINNER, Classes.intentClass(intent), (_a = {}, _a[Classes.SPINNER_NO_SPIN] = value != null, _a), className); // keep spinner track width consistent at all sizes (down to about 10px).\n\n    var strokeWidth = Math.min(MIN_STROKE_WIDTH, STROKE_WIDTH * SpinnerSize.LARGE / size);\n    var strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1)); // multiple DOM elements around SVG are necessary to properly isolate animation:\n    // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n    // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n\n    return React.createElement(tagName, __assign({\n      \"aria-valuemax\": 100,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": value === undefined ? undefined : value * 100,\n      className: classes,\n      role: \"progressbar\"\n    }, htmlProps), React.createElement(tagName, {\n      className: Classes.SPINNER_ANIMATION\n    }, React.createElement(\"svg\", {\n      width: size,\n      height: size,\n      strokeWidth: strokeWidth.toFixed(2),\n      viewBox: this.getViewBox(strokeWidth)\n    }, React.createElement(\"path\", {\n      className: Classes.SPINNER_TRACK,\n      d: SPINNER_TRACK\n    }), React.createElement(\"path\", {\n      className: Classes.SPINNER_HEAD,\n      d: SPINNER_TRACK,\n      pathLength: PATH_LENGTH,\n      strokeDasharray: \"\".concat(PATH_LENGTH, \" \").concat(PATH_LENGTH),\n      strokeDashoffset: strokeOffset\n    }))));\n  };\n\n  Spinner.prototype.validateProps = function (_a) {\n    var _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        size = _a.size;\n\n    if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n      console.warn(SPINNER_WARN_CLASSES_SIZE);\n    }\n  };\n  /**\n   * Resolve size to a pixel value.\n   * Size can be set by className, props, default, or minimum constant.\n   */\n\n\n  Spinner.prototype.getSize = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        size = _a.size;\n\n    if (size == null) {\n      // allow Classes constants to determine default size.\n      if (className.indexOf(Classes.SMALL) >= 0) {\n        return SpinnerSize.SMALL;\n      } else if (className.indexOf(Classes.LARGE) >= 0) {\n        return SpinnerSize.LARGE;\n      }\n\n      return SpinnerSize.STANDARD;\n    }\n\n    return Math.max(MIN_SIZE, size);\n  };\n  /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n\n\n  Spinner.prototype.getViewBox = function (strokeWidth) {\n    var radius = R + strokeWidth / 2;\n    var viewBoxX = (50 - radius).toFixed(2);\n    var viewBoxWidth = (radius * 2).toFixed(2);\n    return \"\".concat(viewBoxX, \" \").concat(viewBoxX, \" \").concat(viewBoxWidth, \" \").concat(viewBoxWidth);\n  };\n\n  Spinner.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Spinner\");\n  return Spinner;\n}(AbstractPureComponent2);\n\nexport { Spinner };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","SPINNER_WARN_CLASSES_SIZE","DISPLAYNAME_PREFIX","clamp","SpinnerSize","R","SPINNER_TRACK","concat","PATH_LENGTH","MIN_SIZE","STROKE_WIDTH","MIN_STROKE_WIDTH","__extends","Spinner","prevProps","value","props","forceUpdate","_b","className","intent","_c","tagName","htmlProps","size","getSize","classes","SPINNER","intentClass","_a","SPINNER_NO_SPIN","strokeWidth","Math","min","LARGE","strokeOffset","createElement","__assign","undefined","role","SPINNER_ANIMATION","width","height","toFixed","viewBox","getViewBox","d","SPINNER_HEAD","pathLength","strokeDasharray","strokeDashoffset","indexOf","SMALL","console","warn","STANDARD","max","radius","viewBoxX","viewBoxWidth"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/spinner/spinner.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, IntentProps, Props } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\n\nexport enum SpinnerSize {\n    SMALL = 20,\n    STANDARD = 50,\n    LARGE = 100,\n}\n\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nconst R = 45;\nconst SPINNER_TRACK = `M 50,50 m 0,-${R} a ${R},${R} 0 1 1 0,${R * 2} a ${R},${R} 0 1 1 0,-${R * 2}`;\n\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nconst PATH_LENGTH = 280;\n\nconst MIN_SIZE = 10;\nconst STROKE_WIDTH = 4;\nconst MIN_STROKE_WIDTH = 16;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type SpinnerProps = (ISpinnerProps & React.HTMLAttributes<any>) | (ISpinnerProps & React.SVGAttributes<any>);\n/** @deprecated use SpinnerProps */\nexport interface ISpinnerProps extends Props, IntentProps {\n    /**\n     * Width and height of the spinner in pixels. The size cannot be less than\n     * 10px.\n     *\n     * Constants are available for common sizes:\n     * - `SpinnerSize.SMALL = 20px`\n     * - `SpinnerSize.STANDARD = 50px`\n     * - `SpinnerSize.LARGE = 100px`\n     *\n     * @default SpinnerSize.STANDARD = 50\n     */\n    size?: number;\n\n    /**\n     * HTML tag for the two wrapper elements. If rendering a `<Spinner>` inside\n     * an `<svg>`, change this to an SVG element like `\"g\"`.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * A value between 0 and 1 (inclusive) representing how far along the operation is.\n     * Values below 0 or above 1 will be interpreted as 0 or 1 respectively.\n     * Omitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely.\n     */\n    value?: number;\n}\n\nexport class Spinner extends AbstractPureComponent2<SpinnerProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Spinner`;\n\n    public componentDidUpdate(prevProps: SpinnerProps) {\n        if (prevProps.value !== this.props.value) {\n            // IE/Edge: re-render after changing value to force SVG update\n            this.forceUpdate();\n        }\n    }\n\n    public render() {\n        const { className, intent, value, tagName = \"div\", ...htmlProps } = this.props;\n        const size = this.getSize();\n\n        const classes = classNames(\n            Classes.SPINNER,\n            Classes.intentClass(intent),\n            { [Classes.SPINNER_NO_SPIN]: value != null },\n            className,\n        );\n\n        // keep spinner track width consistent at all sizes (down to about 10px).\n        const strokeWidth = Math.min(MIN_STROKE_WIDTH, (STROKE_WIDTH * SpinnerSize.LARGE) / size);\n        const strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n\n        // multiple DOM elements around SVG are necessary to properly isolate animation:\n        // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n        // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n        return React.createElement(\n            tagName,\n            {\n                \"aria-valuemax\": 100,\n                \"aria-valuemin\": 0,\n                \"aria-valuenow\": value === undefined ? undefined : value * 100,\n                className: classes,\n                role: \"progressbar\",\n                ...htmlProps,\n            },\n            React.createElement(\n                tagName,\n                { className: Classes.SPINNER_ANIMATION },\n                <svg\n                    width={size}\n                    height={size}\n                    strokeWidth={strokeWidth.toFixed(2)}\n                    viewBox={this.getViewBox(strokeWidth)}\n                >\n                    <path className={Classes.SPINNER_TRACK} d={SPINNER_TRACK} />\n                    <path\n                        className={Classes.SPINNER_HEAD}\n                        d={SPINNER_TRACK}\n                        pathLength={PATH_LENGTH}\n                        strokeDasharray={`${PATH_LENGTH} ${PATH_LENGTH}`}\n                        strokeDashoffset={strokeOffset}\n                    />\n                </svg>,\n            ),\n        );\n    }\n\n    protected validateProps({ className = \"\", size }: SpinnerProps) {\n        if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n            console.warn(SPINNER_WARN_CLASSES_SIZE);\n        }\n    }\n\n    /**\n     * Resolve size to a pixel value.\n     * Size can be set by className, props, default, or minimum constant.\n     */\n    private getSize() {\n        const { className = \"\", size } = this.props;\n        if (size == null) {\n            // allow Classes constants to determine default size.\n            if (className.indexOf(Classes.SMALL) >= 0) {\n                return SpinnerSize.SMALL;\n            } else if (className.indexOf(Classes.LARGE) >= 0) {\n                return SpinnerSize.LARGE;\n            }\n            return SpinnerSize.STANDARD;\n        }\n        return Math.max(MIN_SIZE, size);\n    }\n\n    /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n    private getViewBox(strokeWidth: number) {\n        const radius = R + strokeWidth / 2;\n        const viewBoxX = (50 - radius).toFixed(2);\n        const viewBoxWidth = (radius * 2).toFixed(2);\n        return `${viewBoxX} ${viewBoxX} ${viewBoxWidth} ${viewBoxWidth}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}