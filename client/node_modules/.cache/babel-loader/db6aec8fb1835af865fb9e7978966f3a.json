{"ast":null,"code":"import { round } from './parsers.js';\n\nfunction hsvaToRgbaObject(_ref) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref;\n\n  const _h = h / 360 * 6;\n\n  const _s = s / 100;\n\n  const _v = v / 100;\n\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2)\n  };\n}\n\nfunction hsvaToRgba(color, includeAlpha) {\n  const {\n    r,\n    g,\n    b,\n    a\n  } = hsvaToRgbaObject(color);\n\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\n\nfunction hsvaToHsl(_ref2, includeAlpha) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref2;\n  const hh = (200 - s) * v / 100;\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? s * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),\n    l: Math.round(hh / 2)\n  };\n\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\n\nfunction formatHexPart(number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\n\nfunction hsvaToHex(color) {\n  const {\n    r,\n    g,\n    b\n  } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\n\nconst CONVERTERS = {\n  hex: hsvaToHex,\n  rgb: color => hsvaToRgba(color, false),\n  rgba: color => hsvaToRgba(color, true),\n  hsl: color => hsvaToHsl(color, false),\n  hsla: color => hsvaToHsl(color, true)\n};\n\nfunction convertHsvaTo(format, color) {\n  if (!color) {\n    return \"#000000\";\n  }\n\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n\n  return CONVERTERS[format](color);\n}\n\nexport { convertHsvaTo, hsvaToHex, hsvaToHsl, hsvaToRgba, hsvaToRgbaObject };","map":{"version":3,"mappings":"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","names":["hsvaToRgbaObject","h","s","v","a","_h","_s","_v","hh","Math","floor","l","c","d","module","r","round","g","b","hsvaToRgba","color","includeAlpha","hsvaToHsl","result","formatHexPart","number","hex","toString","length","hsvaToHex","CONVERTERS","rgb","rgba","hsl","hsla","convertHsvaTo","format"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@mantine/core/src/components/ColorPicker/converters/converters.ts"],"sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\nimport { round } from './parsers';\n\nexport function hsvaToRgbaObject({ h, s, v, a }: HsvaColor): RgbaColor {\n  const _h = (h / 360) * 6;\n  const _s = s / 100;\n  const _v = v / 100;\n\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2),\n  };\n}\n\nexport function hsvaToRgba(color: HsvaColor, includeAlpha: boolean) {\n  const { r, g, b, a } = hsvaToRgbaObject(color);\n\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\n\nexport function hsvaToHsl({ h, s, v, a }: HsvaColor, includeAlpha: boolean) {\n  const hh = ((200 - s) * v) / 100;\n\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: Math.round(hh / 2),\n  };\n\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\n\nfunction formatHexPart(number: number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\n\nexport function hsvaToHex(color: HsvaColor) {\n  const { r, g, b } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\n\nconst CONVERTERS: Record<ColorFormat, (color: HsvaColor) => string> = {\n  hex: hsvaToHex,\n  rgb: (color) => hsvaToRgba(color, false),\n  rgba: (color) => hsvaToRgba(color, true),\n  hsl: (color) => hsvaToHsl(color, false),\n  hsla: (color) => hsvaToHsl(color, true),\n};\n\nexport function convertHsvaTo(format: ColorFormat, color: HsvaColor) {\n  if (!color) {\n    return '#000000';\n  }\n\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n\n  return CONVERTERS[format](color);\n}\n"]},"metadata":{},"sourceType":"module"}