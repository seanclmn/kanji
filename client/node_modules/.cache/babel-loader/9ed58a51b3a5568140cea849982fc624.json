{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\n\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === \"function\") return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === \"function\") return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === \"function\") return _document.mozCancelFullScreen();\n  return null;\n}\n\nasync function enterFullScreen(element) {\n  var _a, _b, _c, _d;\n\n  const _element = element;\n  return ((_a = _element.requestFullscreen) == null ? void 0 : _a.call(_element)) || ((_b = _element.msRequestFullscreen) == null ? void 0 : _b.call(_element)) || ((_c = _element.webkitRequestFullscreen) == null ? void 0 : _c.call(_element)) || ((_d = _element.mozRequestFullscreen) == null ? void 0 : _d.call(_element));\n}\n\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\n\nfunction addEvents(element, _ref2) {\n  let {\n    onFullScreen,\n    onError\n  } = _ref2;\n  prefixes.forEach(prefix => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n\n  const _ref = useRef();\n\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\n\nexport { useFullscreen };","map":{"version":3,"mappings":"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","names":["getFullscreenElement","_document","window","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","webkitExitFullscreen","mozCancelFullScreen","enterFullScreen","element","_a","_b","_c","_d","_element","requestFullscreen","call","msRequestFullscreen","webkitRequestFullscreen","mozRequestFullscreen","prefixes","addEvents","onFullScreen","onError","forEach","prefix","addEventListener","removeEventListener","useFullscreen","fullscreen","setFullscreen","useState","_ref","useRef","handleFullscreenChange","useCallback","event","target","handleFullscreenError","console","error","toggle","current","ref","documentElement","useEffect"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/hooks/src/use-fullscreen/use-fullscreen.ts"],"sourcesContent":["import { useCallback, useRef, useState, useEffect } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === 'function') return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === 'function') return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === 'function') return _document.mozCancelFullScreen();\n\n  return null;\n}\n\nasync function enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>();\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"]},"metadata":{},"sourceType":"module"}