{"ast":null,"code":"import React, { forwardRef, useState } from 'react';\nimport useStyles from './Thumb.styles.js';\nimport { Box } from '../../Box/Box.js';\nimport { Transition } from '../../Transition/Transition.js';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    color,\n    classNames,\n    styles,\n    size,\n    labelTransition,\n    labelTransitionDuration,\n    labelTransitionTimingFunction,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    children = null,\n    disabled\n  } = _ref;\n  const {\n    classes,\n    cx,\n    theme\n  } = useStyles({\n    color,\n    size,\n    disabled\n  }, {\n    classNames,\n    styles,\n    name: \"Slider\"\n  });\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n  return /* @__PURE__ */React.createElement(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    className: cx(classes.thumb, {\n      [classes.dragging]: dragging\n    }),\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onClick: event => event.stopPropagation(),\n    style: {\n      [theme.dir === \"rtl\" ? \"right\" : \"left\"]: `${position}%`\n    }\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    style: transitionStyles,\n    className: classes.label\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"mappings":";;;;AAIY,MAACA,KAAK,GAAGC,UAAU,CAAC,OAsB7BC,GAtB6B,KAsBrB;EAAA,IAtBsB;IAC/BC,GAD+B;IAE/BC,GAF+B;IAG/BC,KAH+B;IAI/BC,QAJ+B;IAK/BC,KAL+B;IAM/BC,QAN+B;IAO/BC,WAP+B;IAQ/BC,KAR+B;IAS/BC,UAT+B;IAU/BC,MAV+B;IAW/BC,IAX+B;IAY/BC,eAZ+B;IAa/BC,uBAb+B;IAc/BC,6BAd+B;IAe/BC,aAf+B;IAgB/BC,UAhB+B;IAiB/BC,OAjB+B;IAkB/BC,MAlB+B;IAmB/BC,gBAnB+B;IAoB/BC,QAAQ,GAAG,IApBoB;IAqB/BC;EArB+B,CAsBtB;EACT,MAAM;IAAEC,OAAF;IAAWC,EAAX;IAAeC;EAAf,IAAyBC,SAAS,CAAC;IAAEjB,KAAF;IAASG,IAAT;IAAeU;EAAf,CAAD,EAA4B;IAAEZ,UAAF;IAAcC,MAAd;IAAsBgB,IAAI,EAAE;EAA5B,CAA5B,CAAxC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAMC,SAAS,GAAGf,aAAa,IAAIT,QAAjB,IAA6BqB,OAA7B,IAAwCR,gBAA1D;EACA,sBAAuBY,KAAK,CAACC,aAAN,CAAoBC,GAApB,EAAyB;IAC9CC,QAAQ,EAAE,CADoC;IAE9CC,IAAI,EAAE,QAFwC;IAG9C,cAAcnB,UAHgC;IAI9C,iBAAiBf,GAJ6B;IAK9C,iBAAiBC,GAL6B;IAM9C,iBAAiBC,KAN6B;IAO9CH,GAP8C;IAQ9CoC,SAAS,EAAEb,EAAE,CAACD,OAAO,CAACe,KAAT,EAAgB;MAAE,CAACf,OAAO,CAAChB,QAAT,GAAoBA;IAAtB,CAAhB,CARiC;IAS9CW,OAAO,EAAE,MAAM;MACbW,UAAU,CAAC,IAAD,CAAV;MACA,OAAOX,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAAxC;IACD,CAZ6C;IAa9CC,MAAM,EAAE,MAAM;MACZU,UAAU,CAAC,KAAD,CAAV;MACA,OAAOV,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,EAAtC;IACD,CAhB6C;IAiB9CoB,YAAY,EAAE/B,WAjBgC;IAkB9CA,WAlB8C;IAmB9CgC,OAAO,EAAGC,KAAD,IAAWA,KAAK,CAACC,eAAN,EAnB0B;IAoB9CC,KAAK,EAAE;MAAE,CAAClB,KAAK,CAACmB,GAAN,KAAc,KAAd,GAAsB,OAAtB,GAAgC,MAAjC,GAA2C,GAAEvC,QAAS;IAAxD;EApBuC,CAAzB,EAqBpBgB,QArBoB,EAqBZ,eAAkBW,KAAK,CAACC,aAAN,CAAoBY,UAApB,EAAgC;IAC3DC,OAAO,EAAExC,KAAK,IAAI,IAAT,IAAiByB,SADiC;IAE3DgB,QAAQ,EAAEjC,uBAFiD;IAG3DkC,UAAU,EAAEnC,eAH+C;IAI3DoC,cAAc,EAAElC,6BAA6B,IAAIU,KAAK,CAACyB;EAJI,CAAhC,EAKzBC,gBAAD,IAAiB,eAAqBnB,KAAK,CAACC,aAAN,CAAoB,KAApB,EAA2B;IAClEU,KAAK,EAAEQ,gBAD2D;IAElEd,SAAS,EAAEd,OAAO,CAACjB;EAF+C,CAA3B,EAGtCA,KAHsC,CALZ,CArBN,CAAvB;AA8BD,CAxD8B,CAAnB;AAyDZP,KAAK,CAACqD,WAAN,GAAoB,2BAApB","names":["Thumb","forwardRef","ref","max","min","value","position","label","dragging","onMouseDown","color","classNames","styles","size","labelTransition","labelTransitionDuration","labelTransitionTimingFunction","labelAlwaysOn","thumbLabel","onFocus","onBlur","showLabelOnHover","children","disabled","classes","cx","theme","useStyles","name","focused","setFocused","useState","isVisible","React","createElement","Box","tabIndex","role","className","thumb","onTouchStart","onClick","event","stopPropagation","style","dir","Transition","mounted","duration","transition","timingFunction","transitionTimingFunction","transitionStyles","displayName"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/core/src/components/Slider/Thumb/Thumb.tsx"],"sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport { DefaultProps, MantineNumberSize, MantineColor, Selectors } from '@mantine/styles';\nimport { Box } from '../../Box';\nimport { Transition, MantineTransition } from '../../Transition';\nimport useStyles from './Thumb.styles';\n\nexport type ThumbStylesNames = Selectors<typeof useStyles>;\n\nexport interface ThumbProps extends DefaultProps<ThumbStylesNames> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  color: MantineColor;\n  size: MantineNumberSize;\n  label: React.ReactNode;\n  onMouseDown(event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void;\n  labelTransition?: MantineTransition;\n  labelTransitionDuration?: number;\n  labelTransitionTimingFunction?: string;\n  labelAlwaysOn: boolean;\n  thumbLabel: string;\n  onFocus?(): void;\n  onBlur?(): void;\n  showLabelOnHover?: boolean;\n  children?: React.ReactNode;\n  disabled: boolean;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      color,\n      classNames,\n      styles,\n      size,\n      labelTransition,\n      labelTransitionDuration,\n      labelTransitionTimingFunction,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      children = null,\n      disabled,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { classes, cx, theme } = useStyles(\n      { color, size, disabled },\n      { classNames, styles, name: 'Slider' }\n    );\n    const [focused, setFocused] = useState(false);\n    const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n\n    return (\n      <Box<'div'>\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        className={cx(classes.thumb, { [classes.dragging]: dragging })}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onClick={(event) => event.stopPropagation()}\n        style={{ [theme.dir === 'rtl' ? 'right' : 'left']: `${position}%` }}\n      >\n        {children}\n        <Transition\n          mounted={label != null && isVisible}\n          duration={labelTransitionDuration}\n          transition={labelTransition}\n          timingFunction={labelTransitionTimingFunction || theme.transitionTimingFunction}\n        >\n          {(transitionStyles) => (\n            <div style={transitionStyles} className={classes.label}>\n              {label}\n            </div>\n          )}\n        </Transition>\n      </Box>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"]},"metadata":{},"sourceType":"module"}