{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\"; // this component is simple enough that tests would be purely tautological.\n\n/* istanbul ignore next */\n\nvar TextArea =\n/** @class */\nfunction (_super) {\n  __extends(TextArea, _super);\n\n  function TextArea() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {}; // used to measure and set the height of the component on first mount\n\n    _this.textareaElement = null;\n    _this.handleRef = refHandler(_this, \"textareaElement\", _this.props.inputRef);\n\n    _this.handleChange = function (e) {\n      if (_this.props.growVertically) {\n        _this.setState({\n          height: e.target.scrollHeight\n        });\n      }\n\n      if (_this.props.onChange != null) {\n        _this.props.onChange(e);\n      }\n    };\n\n    return _this;\n  }\n\n  TextArea.prototype.componentDidMount = function () {\n    var _a;\n\n    if (this.props.growVertically && this.textareaElement !== null) {\n      // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n\n      /* eslint-disable-next-line react/no-did-mount-set-state */\n      this.setState({\n        height: (_a = this.textareaElement) === null || _a === void 0 ? void 0 : _a.scrollHeight\n      });\n    }\n  };\n\n  TextArea.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.textareaElement);\n    }\n  };\n\n  TextArea.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        fill = _b.fill,\n        inputRef = _b.inputRef,\n        intent = _b.intent,\n        large = _b.large,\n        small = _b.small,\n        growVertically = _b.growVertically,\n        htmlProps = __rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n\n    var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {}, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a), className); // add explicit height style while preserving user-supplied styles if they exist\n\n    var _c = htmlProps.style,\n        style = _c === void 0 ? {} : _c;\n\n    if (growVertically && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = __assign(__assign({}, style), {\n        height: \"\".concat(this.state.height, \"px\")\n      });\n    }\n\n    return React.createElement(\"textarea\", __assign({}, htmlProps, {\n      className: rootClasses,\n      onChange: this.handleChange,\n      ref: this.handleRef,\n      style: style\n    }));\n  };\n\n  TextArea.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".TextArea\");\n  return TextArea;\n}(AbstractPureComponent2);\n\nexport { TextArea };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","refHandler","setRef","DISPLAYNAME_PREFIX","__extends","_this","props","inputRef","e","growVertically","setState","height","target","scrollHeight","onChange","TextArea","textareaElement","_a","prevProps","handleRef","_b","className","fill","intent","large","small","htmlProps","rootClasses","INPUT","intentClass","FILL","LARGE","SMALL","_c","state","style","handleChange","ref"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/forms/textArea.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, IRef, IRefCallback, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, IntentProps, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TextAreaProps = ITextAreaProps;\n/** @deprecated use TextAreaProps */\nexport interface ITextAreaProps extends IntentProps, Props, React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    /**\n     * Whether the text area should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the text area should appear with large styling.\n     */\n    large?: boolean;\n\n    /**\n     * Whether the text area should appear with small styling.\n     */\n    small?: boolean;\n\n    /**\n     * Whether the text area should automatically grow vertically to accomodate content.\n     */\n    growVertically?: boolean;\n\n    /**\n     * Ref handler that receives HTML `<textarea>` element backing this component.\n     */\n    inputRef?: IRef<HTMLTextAreaElement>;\n}\n\nexport interface ITextAreaState {\n    height?: number;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\nexport class TextArea extends AbstractPureComponent2<TextAreaProps, ITextAreaState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TextArea`;\n\n    public state: ITextAreaState = {};\n\n    // used to measure and set the height of the component on first mount\n    public textareaElement: HTMLTextAreaElement | null = null;\n\n    private handleRef: IRefCallback<HTMLTextAreaElement> = refHandler(this, \"textareaElement\", this.props.inputRef);\n\n    public componentDidMount() {\n        if (this.props.growVertically && this.textareaElement !== null) {\n            // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n            /* eslint-disable-next-line react/no-did-mount-set-state */\n            this.setState({\n                height: this.textareaElement?.scrollHeight,\n            });\n        }\n    }\n\n    public componentDidUpdate(prevProps: TextAreaProps) {\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.textareaElement);\n        }\n    }\n\n    public render() {\n        const { className, fill, inputRef, intent, large, small, growVertically, ...htmlProps } = this.props;\n\n        const rootClasses = classNames(\n            Classes.INPUT,\n            Classes.intentClass(intent),\n            {\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n            },\n            className,\n        );\n\n        // add explicit height style while preserving user-supplied styles if they exist\n        let { style = {} } = htmlProps;\n        if (growVertically && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = {\n                ...style,\n                height: `${this.state.height}px`,\n            };\n        }\n\n        return (\n            <textarea\n                {...htmlProps}\n                className={rootClasses}\n                onChange={this.handleChange}\n                ref={this.handleRef}\n                style={style}\n            />\n        );\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        if (this.props.growVertically) {\n            this.setState({\n                height: e.target.scrollHeight,\n            });\n        }\n\n        if (this.props.onChange != null) {\n            this.props.onChange(e);\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}