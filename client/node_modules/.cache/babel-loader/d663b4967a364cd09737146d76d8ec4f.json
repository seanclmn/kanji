{"ast":null,"code":"import { useState, useRef, useCallback } from 'react';\n\nfunction useIntersection(options) {\n  const [entry, setEntry] = useState(null);\n  const observer = useRef();\n  const ref = useCallback(element => {\n    if (observer.current) {\n      observer.current.disconnect();\n      observer.current = null;\n    }\n\n    if (element === null) {\n      setEntry(null);\n      return;\n    }\n\n    observer.current = new IntersectionObserver(_ref => {\n      let [_entry] = _ref;\n      setEntry(_entry);\n    }, options);\n    observer.current.observe(element);\n  }, [options == null ? void 0 : options.rootMargin, options == null ? void 0 : options.root, options == null ? void 0 : options.threshold]);\n  return [ref, entry];\n}\n\nexport { useIntersection };","map":{"version":3,"mappings":";;AACO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;EACvC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAMC,QAAQ,GAAGC,MAAM,EAAvB;EACA,MAAMC,GAAG,GAAGC,WAAW,CAAEC,OAAD,IAAa;IACnC,IAAIJ,QAAQ,CAACK,OAAb,EAAsB;MACpBL,QAAQ,CAACK,OAAT,CAAiBC,UAAjB;MACAN,QAAQ,CAACK,OAAT,GAAmB,IAAnB;IACD;;IACD,IAAID,OAAO,KAAK,IAAhB,EAAsB;MACpBN,QAAQ,CAAC,IAAD,CAAR;MACA;IACD;;IACDE,QAAQ,CAACK,OAAT,GAAmB,IAAIE,oBAAJ,CAAyB,QAAc;MAAA,IAAb,CAACC,MAAD,CAAa;MACxDV,QAAQ,CAACU,MAAD,CAAR;IACD,CAFkB,EAEhBZ,OAFgB,CAAnB;IAGAI,QAAQ,CAACK,OAAT,CAAiBI,OAAjB,CAAyBL,OAAzB;EACD,CAbsB,EAapB,CAACR,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,UAApC,EAAgDd,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACe,IAAnF,EAAyFf,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACgB,SAA5H,CAboB,CAAvB;EAcA,OAAO,CAACV,GAAD,EAAML,KAAN,CAAP;AACF","names":["useIntersection","options","entry","setEntry","useState","observer","useRef","ref","useCallback","element","current","disconnect","IntersectionObserver","_entry","observe","rootMargin","root","threshold"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@mantine/hooks/src/use-intersection/use-intersection.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport function useIntersection<T extends HTMLElement = any>(\n  options?: ConstructorParameters<typeof IntersectionObserver>[1]\n): readonly [(element: T | null) => void, IntersectionObserverEntry | null] {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>(null);\n\n  const observer = useRef<IntersectionObserver>();\n\n  const ref = useCallback(\n    (element: T | null) => {\n      if (observer.current) {\n        observer.current.disconnect();\n        observer.current = null;\n      }\n\n      if (element === null) {\n        setEntry(null);\n        return;\n      }\n\n      observer.current = new IntersectionObserver(([_entry]) => {\n        setEntry(_entry);\n      }, options);\n\n      observer.current.observe(element);\n    },\n    [options?.rootMargin, options?.root, options?.threshold]\n  );\n\n  return [ref, entry] as const;\n}\n"]},"metadata":{},"sourceType":"module"}