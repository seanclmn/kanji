{"ast":null,"code":"import clsx from 'clsx';\nimport { serializeStyles } from '@emotion/serialize';\nimport { insertStyles, getRegisteredStyles } from '@emotion/utils';\nimport { useGuaranteedMemo } from './utils/use-guaranteed-memo/use-guaranteed-memo.js';\nimport { useEmotionCache } from './use-emotion-cache.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst refPropertyName = \"ref\";\n\nfunction getRef(args) {\n  let ref;\n\n  if (args.length !== 1) {\n    return {\n      args,\n      ref\n    };\n  }\n\n  const [arg] = args;\n\n  if (!(arg instanceof Object)) {\n    return {\n      args,\n      ref\n    };\n  }\n\n  if (!(refPropertyName in arg)) {\n    return {\n      args,\n      ref\n    };\n  }\n\n  ref = arg[refPropertyName];\n\n  const argCopy = __spreadValues({}, arg);\n\n  delete argCopy[refPropertyName];\n  return {\n    args: [argCopy],\n    ref\n  };\n}\n\nconst {\n  cssFactory\n} = (() => {\n  function merge(registered, css, className) {\n    const registeredStyles = [];\n    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n\n    return rawClassName + css(registeredStyles);\n  }\n\n  function _cssFactory(params) {\n    const {\n      cache\n    } = params;\n\n    const css = function () {\n      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n        styles[_key] = arguments[_key];\n      }\n\n      const {\n        ref,\n        args\n      } = getRef(styles);\n      const serialized = serializeStyles(args, cache.registered);\n      insertStyles(cache, serialized, false);\n      return `${cache.key}-${serialized.name}${ref === void 0 ? \"\" : ` ${ref}`}`;\n    };\n\n    const cx = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return merge(cache.registered, css, clsx(args));\n    };\n\n    return {\n      css,\n      cx\n    };\n  }\n\n  return {\n    cssFactory: _cssFactory\n  };\n})();\n\nfunction useCss() {\n  const cache = useEmotionCache();\n  return useGuaranteedMemo(() => cssFactory({\n    cache\n  }), [cache]);\n}\n\nexport { cssFactory, useCss };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","refPropertyName","getRef","args","ref","length","arg","argCopy","cssFactory","merge","registered","css","className","registeredStyles","rawClassName","getRegisteredStyles","_cssFactory","params","cache","styles","serialized","serializeStyles","insertStyles","name","cx","clsx","useCss","useEmotionCache","useGuaranteedMemo"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/styles/src/tss/use-css.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport { serializeStyles, RegisteredCache } from '@emotion/serialize';\nimport { insertStyles, getRegisteredStyles } from '@emotion/utils';\nimport type { EmotionCache } from '@emotion/cache';\nimport { useGuaranteedMemo } from './utils/use-guaranteed-memo/use-guaranteed-memo';\nimport type { CSS } from './types';\nimport { useEmotionCache } from './use-emotion-cache';\n\nconst refPropertyName = 'ref' as const;\n\nfunction getRef(args: any[]) {\n  let ref: string;\n\n  if (args.length !== 1) {\n    return { args, ref };\n  }\n\n  const [arg] = args;\n\n  if (!(arg instanceof Object)) {\n    return { args, ref };\n  }\n\n  if (!(refPropertyName in arg)) {\n    return { args, ref };\n  }\n\n  ref = arg[refPropertyName];\n  const argCopy = { ...arg };\n  delete argCopy[refPropertyName];\n  return { args: [argCopy], ref };\n}\n\nexport const { cssFactory } = (() => {\n  function merge(registered: RegisteredCache, css: CSS, className: string) {\n    const registeredStyles: string[] = [];\n\n    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n\n    return rawClassName + css(registeredStyles);\n  }\n\n  function _cssFactory(params: { cache: EmotionCache }) {\n    const { cache } = params;\n\n    const css: CSS = (...styles: any) => {\n      const { ref, args } = getRef(styles);\n      const serialized = serializeStyles(args, cache.registered);\n      insertStyles(cache as any, serialized, false);\n      return `${cache.key}-${serialized.name}${ref === undefined ? '' : ` ${ref}`}`;\n    };\n\n    const cx = (...args: any) => merge(cache.registered, css, clsx(args));\n\n    return { css, cx };\n  }\n\n  return { cssFactory: _cssFactory };\n})();\n\nexport function useCss() {\n  const cache = useEmotionCache();\n  return useGuaranteedMemo(() => cssFactory({ cache }), [cache]);\n}\n"]},"metadata":{},"sourceType":"module"}