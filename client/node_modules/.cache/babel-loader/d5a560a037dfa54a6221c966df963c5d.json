{"ast":null,"code":"import { useState } from 'react';\nimport { getInputOnChange } from '../use-input-state/use-input-state.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useForm(_ref) {\n  let {\n    initialValues,\n    validationRules = {},\n    errorMessages = {}\n  } = _ref;\n  const initialErrors = Object.keys(initialValues).reduce((acc, field) => {\n    acc[field] = null;\n    return acc;\n  }, {});\n  const [errors, setErrors] = useState(initialErrors);\n  const [values, setValues] = useState(initialValues);\n\n  const resetErrors = () => setErrors(initialErrors);\n\n  const reset = () => {\n    setValues(initialValues);\n    resetErrors();\n  };\n\n  const validate = () => {\n    let isValid = true;\n    const validationErrors = Object.keys(values).reduce((acc, field) => {\n      if (validationRules && typeof validationRules[field] === \"function\" && !validationRules[field](values[field], values)) {\n        acc[field] = errorMessages[field] || true;\n        isValid = false;\n      } else {\n        acc[field] = null;\n      }\n\n      return acc;\n    }, {});\n    setErrors(validationErrors);\n    return isValid;\n  };\n\n  const validateField = field => setErrors(currentErrors => __spreadProps(__spreadValues({}, currentErrors), {\n    [field]: typeof validationRules[field] === \"function\" ? validationRules[field](values[field], values) ? null : errorMessages[field] || true : null\n  }));\n\n  const setFieldError = (field, error) => setErrors(currentErrors => __spreadProps(__spreadValues({}, currentErrors), {\n    [field]: error\n  }));\n\n  const setFieldValue = (field, value) => {\n    setValues(currentValues => __spreadProps(__spreadValues({}, currentValues), {\n      [field]: value\n    }));\n    setFieldError(field, null);\n  };\n\n  const onSubmit = handleSubmit => event => {\n    event && event.preventDefault();\n    validate() && handleSubmit(values);\n  };\n\n  const getInputProps = (field, options) => ({\n    [(options == null ? void 0 : options.type) === \"checkbox\" ? \"checked\" : \"value\"]: values[field],\n    onChange: getInputOnChange(val => setFieldValue(field, val)),\n    error: errors[field] || void 0\n  });\n\n  return {\n    values,\n    errors,\n    validate,\n    reset,\n    setErrors,\n    setValues,\n    setFieldValue,\n    setFieldError,\n    validateField,\n    resetErrors,\n    onSubmit,\n    getInputProps\n  };\n}\n\nexport { useForm };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","useForm","initialValues","validationRules","errorMessages","initialErrors","keys","reduce","acc","field","errors","setErrors","useState","values","setValues","resetErrors","reset","validate","isValid","validationErrors","validateField","currentErrors","setFieldError","error","setFieldValue","currentValues","onSubmit","handleSubmit","event","preventDefault","getInputProps","options","type","onChange","getInputOnChange","val"],"sources":["/Users/seancoleman/Projects/kanji/client/node_modules/@mantine/hooks/src/use-form/use-form.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { getInputOnChange } from '../use-input-state/use-input-state';\n\nexport type ValidationRule<T> = {\n  readonly [P in keyof T]?: (value: T[P], values?: T) => boolean;\n};\n\nexport type UseFormErrors<T> = {\n  readonly [P in keyof T]?: React.ReactNode | null;\n};\n\ninterface UseFormInput<T> {\n  validationRules?: ValidationRule<T>;\n  errorMessages?: UseFormErrors<T>;\n  initialValues: T;\n}\n\nexport interface UseForm<T> {\n  values: T;\n  errors: Record<keyof T, React.ReactNode>;\n  validate: () => boolean;\n  reset: () => void;\n  setErrors: React.Dispatch<React.SetStateAction<Record<keyof T, React.ReactNode>>>;\n  setValues: React.Dispatch<React.SetStateAction<T>>;\n  setFieldValue: <K extends keyof T, U extends T[K]>(field: K, value: U) => void;\n  setFieldError: (field: keyof T, error: React.ReactNode) => void;\n  validateField: (field: keyof T) => void;\n  resetErrors: () => void;\n  onSubmit: (handleSubmit: (values: T) => any) => (event?: React.FormEvent) => void;\n  getInputProps: <K extends keyof T>(\n    field: K,\n    options?: {\n      type?: 'checkbox' | 'default';\n    }\n  ) => {\n    [x: string]: any;\n    onChange: any;\n    error: Record<keyof T, React.ReactNode>[K];\n  };\n}\n\nexport function useForm<T extends { [key: string]: any }>({\n  initialValues,\n  validationRules = {},\n  errorMessages = {},\n}: UseFormInput<T>): UseForm<T> {\n  type ValidationErrors = Record<keyof T, React.ReactNode>;\n\n  const initialErrors = Object.keys(initialValues).reduce((acc, field) => {\n    acc[field as keyof T] = null;\n    return acc;\n  }, {} as ValidationErrors);\n\n  const [errors, setErrors] = useState(initialErrors);\n  const [values, setValues] = useState(initialValues);\n\n  const resetErrors = () => setErrors(initialErrors);\n\n  const reset = () => {\n    setValues(initialValues);\n    resetErrors();\n  };\n\n  const validate = () => {\n    let isValid = true;\n\n    const validationErrors = Object.keys(values).reduce((acc, field) => {\n      if (\n        validationRules &&\n        typeof validationRules[field] === 'function' &&\n        !validationRules[field](values[field], values)\n      ) {\n        acc[field as keyof T] = errorMessages[field] || true;\n        isValid = false;\n      } else {\n        acc[field as keyof T] = null;\n      }\n\n      return acc;\n    }, {} as ValidationErrors);\n\n    setErrors(validationErrors);\n    return isValid;\n  };\n\n  const validateField = (field: keyof T) =>\n    setErrors((currentErrors) => ({\n      ...currentErrors,\n      [field]:\n        typeof validationRules[field] === 'function'\n          ? validationRules[field](values[field], values)\n            ? null\n            : errorMessages[field] || true\n          : null,\n    }));\n\n  const setFieldError = (field: keyof T, error: React.ReactNode) =>\n    setErrors((currentErrors) => ({ ...currentErrors, [field]: error }));\n\n  const setFieldValue = <K extends keyof T, U extends T[K]>(field: K, value: U) => {\n    setValues((currentValues) => ({ ...currentValues, [field]: value }));\n    setFieldError(field, null);\n  };\n\n  const onSubmit = (handleSubmit: (values: T) => any) => (event?: React.FormEvent) => {\n    event && event.preventDefault();\n    validate() && handleSubmit(values);\n  };\n\n  const getInputProps = <K extends keyof T, U extends T[K]>(\n    field: K,\n    options?: { type?: 'checkbox' | 'default' }\n  ) => ({\n    [options?.type === 'checkbox' ? 'checked' : 'value']: values[field],\n    onChange: getInputOnChange<U>((val: U) => setFieldValue(field, val)) as any,\n    error: errors[field] || undefined,\n  });\n\n  return {\n    values,\n    errors,\n    validate,\n    reset,\n    setErrors,\n    setValues,\n    setFieldValue,\n    setFieldError,\n    validateField,\n    resetErrors,\n    onSubmit,\n    getInputProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}