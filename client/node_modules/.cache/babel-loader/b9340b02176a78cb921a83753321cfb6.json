{"ast":null,"code":"const TABBABLE_NODES = /input|select|textarea|button|object/;\nconst FOCUS_SELECTOR = \"a, input, select, textarea, button, object, [tabindex]\";\n\nfunction hidden(element) {\n  if (process.env.NODE_ENV === \"test\") {\n    return false;\n  }\n\n  return element.style.display === \"none\";\n}\n\nfunction visible(element) {\n  const isHidden = element.getAttribute(\"aria-hidden\") || element.getAttribute(\"hidden\") || element.getAttribute(\"type\") === \"hidden\";\n\n  if (isHidden) {\n    return false;\n  }\n\n  let parentElement = element;\n\n  while (parentElement) {\n    if (parentElement === document.body) {\n      break;\n    }\n\n    if (hidden(parentElement)) {\n      return false;\n    }\n\n    parentElement = parentElement.parentNode;\n  }\n\n  return true;\n}\n\nfunction getElementTabIndex(element) {\n  let tabIndex = element.getAttribute(\"tabindex\");\n\n  if (tabIndex === null) {\n    tabIndex = void 0;\n  }\n\n  return parseInt(tabIndex, 10);\n}\n\nfunction focusable(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res = TABBABLE_NODES.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n  return res && visible(element);\n}\n\nfunction tabbable(element) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\n\nfunction findTabbableDescendants(element) {\n  return Array.from(element.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);\n}\n\nexport { FOCUS_SELECTOR, findTabbableDescendants, focusable, tabbable };","map":{"version":3,"mappings":"AAAA,MAAMA,cAAc,GAAG,qCAAvB;AACY,MAACC,cAAc,GAAG,wDAAlB;;AACZ,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;EACvB,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;IACnC,OAAO,KAAP;EACD;;EACD,OAAOH,OAAO,CAACI,KAAR,CAAcC,OAAd,KAA0B,MAAjC;AACD;;AACD,SAASC,OAAT,CAAiBN,OAAjB,EAA0B;EACxB,MAAMO,QAAQ,GAAGP,OAAO,CAACQ,YAAR,CAAqB,aAArB,KAAuCR,OAAO,CAACQ,YAAR,CAAqB,QAArB,CAAvC,IAAyER,OAAO,CAACQ,YAAR,CAAqB,MAArB,MAAiC,QAA3H;;EACA,IAAID,QAAJ,EAAc;IACZ,OAAO,KAAP;EACD;;EACD,IAAIE,aAAa,GAAGT,OAApB;;EACA,OAAOS,aAAP,EAAsB;IACpB,IAAIA,aAAa,KAAKC,QAAQ,CAACC,IAA/B,EAAqC;MACnC;IACD;;IACD,IAAIZ,MAAM,CAACU,aAAD,CAAV,EAA2B;MACzB,OAAO,KAAP;IACD;;IACDA,aAAa,GAAGA,aAAa,CAACG,UAA9B;EACD;;EACD,OAAO,IAAP;AACD;;AACD,SAASC,kBAAT,CAA4Bb,OAA5B,EAAqC;EACnC,IAAIc,QAAQ,GAAGd,OAAO,CAACQ,YAAR,CAAqB,UAArB,CAAf;;EACA,IAAIM,QAAQ,KAAK,IAAjB,EAAuB;IACrBA,QAAQ,GAAG,KAAK,CAAhB;EACD;;EACD,OAAOC,QAAQ,CAACD,QAAD,EAAW,EAAX,CAAf;AACD;;AACM,SAASE,SAAT,CAAmBhB,OAAnB,EAA4B;EACjC,MAAMiB,QAAQ,GAAGjB,OAAO,CAACiB,QAAR,CAAiBC,WAAjB,EAAjB;EACA,MAAMC,gBAAgB,GAAG,CAACC,MAAM,CAACC,KAAP,CAAaR,kBAAkB,CAACb,OAAD,CAA/B,CAA1B;EACA,MAAMsB,GAAG,GAAGzB,cAAc,CAAC0B,IAAf,CAAoBN,QAApB,KAAiC,CAACjB,OAAO,CAACwB,QAA1C,KAAuDxB,OAAO,YAAYyB,iBAAnB,GAAuCzB,OAAO,CAAC0B,IAAR,IAAgBP,gBAAvD,GAA0EA,gBAAjI,CAAZ;EACA,OAAOG,GAAG,IAAIhB,OAAO,CAACN,OAAD,CAArB;AACD;;AACM,SAAS2B,QAAT,CAAkB3B,OAAlB,EAA2B;EAChC,MAAMc,QAAQ,GAAGD,kBAAkB,CAACb,OAAD,CAAnC;EACA,MAAM4B,aAAa,GAAGR,MAAM,CAACC,KAAP,CAAaP,QAAb,CAAtB;EACA,OAAO,CAACc,aAAa,IAAId,QAAQ,IAAI,CAA9B,KAAoCE,SAAS,CAAChB,OAAD,CAApD;AACD;;AACM,SAAS6B,uBAAT,CAAiC7B,OAAjC,EAA0C;EAC/C,OAAO8B,KAAK,CAACC,IAAN,CAAW/B,OAAO,CAACgC,gBAAR,CAAyBlC,cAAzB,CAAX,EAAqDmC,MAArD,CAA4DN,QAA5D,CAAP;AACF","names":["TABBABLE_NODES","FOCUS_SELECTOR","hidden","element","process","env","NODE_ENV","style","display","visible","isHidden","getAttribute","parentElement","document","body","parentNode","getElementTabIndex","tabIndex","parseInt","focusable","nodeName","toLowerCase","isTabIndexNotNaN","Number","isNaN","res","test","disabled","HTMLAnchorElement","href","tabbable","isTabIndexNaN","findTabbableDescendants","Array","from","querySelectorAll","filter"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@mantine/hooks/src/use-focus-trap/tabbable.ts"],"sourcesContent":["const TABBABLE_NODES = /input|select|textarea|button|object/;\nexport const FOCUS_SELECTOR = 'a, input, select, textarea, button, object, [tabindex]';\n\nfunction hidden(element: HTMLElement) {\n  if (process.env.NODE_ENV === 'test') {\n    return false;\n  }\n\n  return element.style.display === 'none';\n}\n\nfunction visible(element: HTMLElement) {\n  const isHidden =\n    element.getAttribute('aria-hidden') ||\n    element.getAttribute('hidden') ||\n    element.getAttribute('type') === 'hidden';\n\n  if (isHidden) {\n    return false;\n  }\n\n  let parentElement: HTMLElement = element;\n  while (parentElement) {\n    if (parentElement === document.body) {\n      break;\n    }\n\n    if (hidden(parentElement)) {\n      return false;\n    }\n\n    parentElement = parentElement.parentNode as HTMLElement;\n  }\n\n  return true;\n}\n\nfunction getElementTabIndex(element: HTMLElement) {\n  let tabIndex = element.getAttribute('tabindex');\n  if (tabIndex === null) {\n    tabIndex = undefined;\n  }\n  return parseInt(tabIndex, 10);\n}\n\nexport function focusable(element: HTMLElement) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res =\n    // @ts-ignore\n    (TABBABLE_NODES.test(nodeName) && !element.disabled) ||\n    (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n\n  return res && visible(element);\n}\n\nexport function tabbable(element: HTMLElement) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\n\nexport function findTabbableDescendants(element: HTMLElement): HTMLElement[] {\n  return Array.from(element.querySelectorAll<HTMLElement>(FOCUS_SELECTOR)).filter(tabbable);\n}\n"]},"metadata":{},"sourceType":"module"}