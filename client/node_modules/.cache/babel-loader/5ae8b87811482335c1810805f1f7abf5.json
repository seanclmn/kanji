{"ast":null,"code":"import { useState } from 'react';\n\nfunction useQueue(_ref) {\n  let {\n    initialValues = [],\n    limit\n  } = _ref;\n  const [{\n    state,\n    queue\n  }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit)\n  });\n\n  const add = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return setState(current => {\n      const results = [...current.state, ...current.queue, ...items];\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n\n  const update = fn => setState(current => {\n    const results = fn([...current.state, ...current.queue]);\n    return {\n      state: results.slice(0, limit),\n      queue: results.slice(limit)\n    };\n  });\n\n  const cleanQueue = () => setState(current => ({\n    state: current.state,\n    queue: []\n  }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue\n  };\n}\n\nexport { useQueue };","map":{"version":3,"mappings":";;AACO,SAASA,QAAT,OAAiD;EAAA,IAA/B;IAAEC,aAAa,GAAG,EAAlB;IAAsBC;EAAtB,CAA+B;EACtD,MAAM,CAAC;IAAEC,KAAF;IAASC;EAAT,CAAD,EAAmBC,QAAnB,IAA+BC,QAAQ,CAAC;IAC5CH,KAAK,EAAEF,aAAa,CAACM,KAAd,CAAoB,CAApB,EAAuBL,KAAvB,CADqC;IAE5CE,KAAK,EAAEH,aAAa,CAACM,KAAd,CAAoBL,KAApB;EAFqC,CAAD,CAA7C;;EAIA,MAAMM,GAAG,GAAG;IAAA,kCAAIC,KAAJ;MAAIA,KAAJ;IAAA;;IAAA,OAAcJ,QAAQ,CAAEK,OAAD,IAAa;MAC9C,MAAMC,OAAO,GAAG,CAAC,GAAGD,OAAO,CAACP,KAAZ,EAAmB,GAAGO,OAAO,CAACN,KAA9B,EAAqC,GAAGK,KAAxC,CAAhB;MACA,OAAO;QACLN,KAAK,EAAEQ,OAAO,CAACJ,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CADF;QAELE,KAAK,EAAEO,OAAO,CAACJ,KAAR,CAAcL,KAAd;MAFF,CAAP;IAID,CANiC,CAAtB;EAAA,CAAZ;;EAOA,MAAMU,MAAM,GAAIC,EAAD,IAAQR,QAAQ,CAAEK,OAAD,IAAa;IAC3C,MAAMC,OAAO,GAAGE,EAAE,CAAC,CAAC,GAAGH,OAAO,CAACP,KAAZ,EAAmB,GAAGO,OAAO,CAACN,KAA9B,CAAD,CAAlB;IACA,OAAO;MACLD,KAAK,EAAEQ,OAAO,CAACJ,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CADF;MAELE,KAAK,EAAEO,OAAO,CAACJ,KAAR,CAAcL,KAAd;IAFF,CAAP;EAID,CAN8B,CAA/B;;EAOA,MAAMY,UAAU,GAAG,MAAMT,QAAQ,CAAEK,OAAD,KAAc;IAAEP,KAAK,EAAEO,OAAO,CAACP,KAAjB;IAAwBC,KAAK,EAAE;EAA/B,CAAd,CAAD,CAAjC;;EACA,OAAO;IACLD,KADK;IAELC,KAFK;IAGLI,GAHK;IAILI,MAJK;IAKLE;EALK,CAAP;AAOF","names":["useQueue","initialValues","limit","state","queue","setState","useState","slice","add","items","current","results","update","fn","cleanQueue"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@mantine/hooks/src/use-queue/use-queue.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useQueue<T>({ initialValues = [], limit }: { initialValues?: T[]; limit: number }) {\n  const [{ state, queue }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit),\n  });\n\n  const add = (...items: T[]) =>\n    setState((current) => {\n      const results = [...current.state, ...current.queue, ...items];\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const update = (fn: (state: T[]) => T[]) =>\n    setState((current) => {\n      const results = fn([...current.state, ...current.queue]);\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const cleanQueue = () => setState((current) => ({ state: current.state, queue: [] }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}