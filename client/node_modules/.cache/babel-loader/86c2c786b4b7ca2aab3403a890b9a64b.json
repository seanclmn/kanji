{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".circle_reactGradientProgress__1_0UG {\\n  display: inline-block;\\n  border-radius: 100%;\\n  position: relative;\\n}\\n.circle_reactGradientProgressPercentage__3mR2b {\\n  position: absolute;\\n  height:100%;\\n  width: 100%;\\n  margin: 0px auto;\\n}\\n\\n.circle_reactGradientProgressPercentageSpan__1HdhL {\\n  position: absolute;\\n  height:100%;\\n  width: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-content: center;\\n  flex-direction: column;\\n  text-align: center;\\n}\\n\\n.circle_progressCircleBar__1IKUZ {\\n  transform: rotate(-90deg);\\n  transform-origin: 50% 50%;\\n}\\n\";\nvar styles = {\n  \"reactGradientProgress\": \"circle_reactGradientProgress__1_0UG\",\n  \"reactGradientProgressPercentage\": \"circle_reactGradientProgressPercentage__3mR2b\",\n  \"reactGradientProgressPercentageSpan\": \"circle_reactGradientProgressPercentageSpan__1HdhL\",\n  \"progressCircleBar\": \"circle_progressCircleBar__1IKUZ\"\n};\nstyleInject(css);\n\nvar CircleProgress = function CircleProgress(_ref) {\n  var percentage = _ref.percentage,\n      width = _ref.width,\n      strokeWidth = _ref.strokeWidth,\n      fontSize = _ref.fontSize,\n      fontColor = _ref.fontColor,\n      fontFamily = _ref.fontFamily,\n      primaryColor = _ref.primaryColor,\n      secondaryColor = _ref.secondaryColor,\n      fill = _ref.fill,\n      hidePercentageText = _ref.hidePercentageText,\n      strokeLinecap = _ref.strokeLinecap;\n  var PI = 3.14;\n  var R = width / 2 - strokeWidth * 2;\n  var circumference = 2 * PI * R;\n  var offset = circumference - percentage / 100 * circumference;\n  var gradientId = ('' + primaryColor[0] + primaryColor[1]).replace(/#/g, '');\n  return React.createElement('div', {\n    className: styles.reactGradientProgress,\n    style: {\n      height: width + 'px',\n      width: width + 'px'\n    }\n  }, !hidePercentageText ? React.createElement('div', {\n    id: styles.reactGradientProgressPercentage\n  }, React.createElement('span', {\n    className: styles.reactGradientProgressPercentageSpan,\n    style: {\n      fontSize: fontSize,\n      fontFamily: fontFamily,\n      color: fontColor\n    }\n  }, percentage, '%')) : null, React.createElement('svg', {\n    width: '100%',\n    height: '100%',\n    version: '1.1',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, React.createElement('linearGradient', {\n    id: gradientId,\n    x1: '0%',\n    y1: '0%',\n    x2: '100%',\n    y2: '100%'\n  }, React.createElement('stop', {\n    offset: '0%',\n    stopColor: primaryColor[0]\n  }), React.createElement('stop', {\n    offset: '100%',\n    stopColor: primaryColor[1]\n  })), React.createElement('circle', {\n    strokeWidth: strokeWidth,\n    fill: 'transparent',\n    r: R,\n    cx: width / 2,\n    cy: width / 2,\n    stroke: secondaryColor,\n    strokeDasharray: circumference + ' ' + circumference\n  }), React.createElement('circle', {\n    className: styles.progressCircleBar,\n    strokeWidth: strokeWidth,\n    fill: fill,\n    r: R,\n    cx: width / 2,\n    cy: width / 2,\n    stroke: 'url(#' + gradientId + ')',\n    strokeLinecap: strokeLinecap,\n    strokeDasharray: circumference + ' ' + circumference,\n    strokeDashoffset: offset\n  })));\n};\n\nCircleProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n  width: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  strokeLinecap: PropTypes.oneOf(['round', 'square', 'butt']),\n  fontSize: PropTypes.string,\n  fontColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  primaryColor: PropTypes.array,\n  secondaryColor: PropTypes.string,\n  fill: PropTypes.string,\n  hidePercentageText: PropTypes.bool\n};\nCircleProgress.defaultProps = {\n  width: 200,\n  strokeWidth: 5,\n  strokeLinecap: 'round',\n  fontSize: 'inherit',\n  fontColor: 'inherit',\n  fontFamily: 'inherit',\n  primaryColor: ['#00BBFF', '#92d7f1'],\n  secondaryColor: 'transparent',\n  fill: 'transparent'\n};\nexport { CircleProgress };","map":{"version":3,"mappings":"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","names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","CircleProgress","percentage","width","strokeWidth","fontSize","fontColor","fontFamily","primaryColor","secondaryColor","fill","hidePercentageText","strokeLinecap","PI","R","circumference","offset","gradientId","replace","React","styles","reactGradientProgress","id","reactGradientProgressPercentage","reactGradientProgressPercentageSpan","stopColor","progressCircleBar","propTypes","PropTypes","number","isRequired","oneOf","string","array","bool","defaultProps"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/react-gradient-progress/node_modules/style-inject/dist/style-inject.es.js","/Users/seancoleman/Projects/kanji/node_modules/react-gradient-progress/src/circle.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './circle.css'\n\nconst CircleProgress = ({\n  percentage,\n  width,\n  strokeWidth,\n  fontSize,\n  fontColor,\n  fontFamily,\n  primaryColor,\n  secondaryColor,\n  fill,\n  hidePercentageText,\n  strokeLinecap,\n}) => {\n  const PI = 3.14\n\n  const R = (width / 2) - (strokeWidth * 2)\n  let circumference = 2 * PI * R\n  let offset = circumference - percentage / 100 * circumference\n  let gradientId = `${primaryColor[0]}${primaryColor[1]}`.replace(/#/g, '')\n  return (\n    <div\n      className={styles.reactGradientProgress}\n      style={{\n        height: `${width}px`,\n        width: `${width}px`,\n      }}\n    >\n      {!hidePercentageText ?\n        <div id={styles.reactGradientProgressPercentage}>\n          <span\n            className={styles.reactGradientProgressPercentageSpan}\n            style={{\n              fontSize,\n              fontFamily,\n              color: fontColor,\n            }}\n          >\n            {percentage}%\n          </span>\n        </div>\n        : null\n      }\n\n      <svg\n        width='100%'\n        height='100%'\n        version='1.1'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <linearGradient\n          id={gradientId}\n          x1='0%'\n          y1='0%'\n          x2='100%'\n          y2='100%'\n        >\n          <stop offset='0%' stopColor={primaryColor[0]}/>\n          <stop offset='100%' stopColor={primaryColor[1]}/>\n        </linearGradient>\n        <circle\n          strokeWidth={strokeWidth}\n          fill='transparent'\n          r={R}\n          cx={width / 2}\n          cy={width / 2}\n          stroke={secondaryColor}\n          strokeDasharray={`${circumference} ${circumference}`}\n        />\n        <circle\n          className={styles.progressCircleBar}\n          strokeWidth={strokeWidth}\n          fill={fill}\n          r={R}\n          cx={width / 2}\n          cy={width / 2}\n          stroke={`url(#${gradientId})`}\n          strokeLinecap={strokeLinecap}\n          strokeDasharray={`${circumference} ${circumference}`}\n          strokeDashoffset={offset}\n        />\n      </svg>\n    </div>\n  )\n}\n\nCircleProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n  width: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  strokeLinecap: PropTypes.oneOf(['round', 'square', 'butt']),\n  fontSize: PropTypes.string,\n  fontColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  primaryColor: PropTypes.array,\n  secondaryColor: PropTypes.string,\n  fill: PropTypes.string,\n  hidePercentageText: PropTypes.bool,\n}\n\nCircleProgress.defaultProps = {\n  width: 200,\n  strokeWidth: 5,\n  strokeLinecap: 'round',\n  fontSize: 'inherit',\n  fontColor: 'inherit',\n  fontFamily: 'inherit',\n  primaryColor: ['#00BBFF', '#92d7f1'],\n  secondaryColor: 'transparent',\n  fill: 'transparent',\n}\n\nexport default CircleProgress\n"]},"metadata":{},"sourceType":"module"}