{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, Position } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Icon } from \"../icon/icon\";\nimport { Popover, PopoverInteractionKind } from \"../popover/popover\";\nimport { Text } from \"../text/text\";\nimport { Menu } from \"./menu\";\n\nvar MenuItem =\n/** @class */\nfunction (_super) {\n  __extends(MenuItem, _super);\n\n  function MenuItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MenuItem.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n        // eslint-disable-next-line deprecation/deprecation\n    active = _c.active,\n        className = _c.className,\n        children = _c.children,\n        disabled = _c.disabled,\n        icon = _c.icon,\n        intent = _c.intent,\n        labelClassName = _c.labelClassName,\n        labelElement = _c.labelElement,\n        multiline = _c.multiline,\n        popoverProps = _c.popoverProps,\n        selected = _c.selected,\n        shouldDismissPopover = _c.shouldDismissPopover,\n        submenuProps = _c.submenuProps,\n        text = _c.text,\n        textClassName = _c.textClassName,\n        _d = _c.tagName,\n        tagName = _d === void 0 ? \"a\" : _d,\n        htmlTitle = _c.htmlTitle,\n        htmlProps = __rest(_c, [\"active\", \"className\", \"children\", \"disabled\", \"icon\", \"intent\", \"labelClassName\", \"labelElement\", \"multiline\", \"popoverProps\", \"selected\", \"shouldDismissPopover\", \"submenuProps\", \"text\", \"textClassName\", \"tagName\", \"htmlTitle\"]);\n\n    var hasIcon = icon != null;\n    var hasSubmenu = children != null;\n    var intentClass = Classes.intentClass(intent);\n    var anchorClasses = classNames(Classes.MENU_ITEM, intentClass, (_a = {}, _a[Classes.ACTIVE] = active, _a[Classes.DISABLED] = disabled, // prevent popover from closing when clicking on submenu trigger or disabled item\n    _a[Classes.POPOVER_DISMISS] = shouldDismissPopover && !disabled && !hasSubmenu, _a[Classes.SELECTED] = selected || active && intentClass === undefined, _a), className);\n    var target = React.createElement(tagName, __assign(__assign(__assign({\n      role: \"menuitem\",\n      tabIndex: 0\n    }, htmlProps), disabled ? DISABLED_PROPS : {}), {\n      className: anchorClasses\n    }), hasIcon ? // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n    // so that we always render this class\n    React.createElement(\"span\", {\n      className: Classes.MENU_ITEM_ICON\n    }, React.createElement(Icon, {\n      icon: icon,\n      \"aria-hidden\": true,\n      tabIndex: -1\n    })) : undefined, React.createElement(Text, {\n      className: classNames(Classes.FILL, textClassName),\n      ellipsize: !multiline,\n      title: htmlTitle\n    }, text), this.maybeRenderLabel(labelElement), hasSubmenu ? React.createElement(Icon, {\n      className: Classes.MENU_SUBMENU_ICON,\n      title: \"Open sub menu\",\n      icon: \"caret-right\"\n    }) : undefined);\n    var liClasses = classNames((_b = {}, _b[Classes.MENU_SUBMENU] = hasSubmenu, _b));\n    return React.createElement(\"li\", {\n      className: liClasses,\n      role: \"none\"\n    }, this.maybeRenderPopover(target, children));\n  };\n\n  MenuItem.prototype.maybeRenderLabel = function (labelElement) {\n    var _a = this.props,\n        label = _a.label,\n        labelClassName = _a.labelClassName;\n\n    if (label == null && labelElement == null) {\n      return null;\n    }\n\n    return React.createElement(\"span\", {\n      className: classNames(Classes.MENU_ITEM_LABEL, labelClassName)\n    }, label, labelElement);\n  };\n\n  MenuItem.prototype.maybeRenderPopover = function (target, children) {\n    if (children == null) {\n      return target;\n    }\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        popoverProps = _a.popoverProps,\n        submenuProps = _a.submenuProps;\n    return (\n      /* eslint-disable-next-line deprecation/deprecation */\n      React.createElement(Popover, __assign({\n        autoFocus: false,\n        captureDismiss: false,\n        disabled: disabled,\n        enforceFocus: false,\n        hoverCloseDelay: 0,\n        interactionKind: PopoverInteractionKind.HOVER,\n        modifiers: SUBMENU_POPOVER_MODIFIERS,\n        position: Position.RIGHT_TOP,\n        usePortal: false\n      }, popoverProps, {\n        content: React.createElement(Menu, __assign({}, submenuProps), children),\n        minimal: true,\n        popoverClassName: classNames(Classes.MENU_SUBMENU, popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.popoverClassName),\n        target: target\n      }))\n    );\n  };\n\n  MenuItem.defaultProps = {\n    active: false,\n    disabled: false,\n    multiline: false,\n    popoverProps: {},\n    selected: false,\n    shouldDismissPopover: true,\n    text: \"\"\n  };\n  MenuItem.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MenuItem\");\n  return MenuItem;\n}(AbstractPureComponent2);\n\nexport { MenuItem };\nvar SUBMENU_POPOVER_MODIFIERS = {\n  // 20px padding - scrollbar width + a bit\n  flip: {\n    boundariesElement: \"viewport\",\n    padding: 20\n  },\n  // shift popover up 5px so MenuItems align\n  offset: {\n    offset: -5\n  },\n  preventOverflow: {\n    boundariesElement: \"viewport\",\n    padding: 20\n  }\n}; // props to ignore when disabled\n\nvar DISABLED_PROPS = {\n  href: undefined,\n  onClick: undefined,\n  onMouseDown: undefined,\n  onMouseEnter: undefined,\n  onMouseLeave: undefined,\n  tabIndex: -1\n};","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Position","DISPLAYNAME_PREFIX","Icon","Popover","PopoverInteractionKind","Text","Menu","__extends","MenuItem","_c","props","active","className","children","disabled","icon","intent","labelClassName","labelElement","multiline","popoverProps","selected","shouldDismissPopover","submenuProps","text","textClassName","_d","tagName","htmlTitle","htmlProps","hasIcon","hasSubmenu","intentClass","anchorClasses","MENU_ITEM","_a","ACTIVE","DISABLED","POPOVER_DISMISS","SELECTED","undefined","target","createElement","__assign","role","tabIndex","DISABLED_PROPS","MENU_ITEM_ICON","FILL","ellipsize","title","maybeRenderLabel","MENU_SUBMENU_ICON","liClasses","_b","MENU_SUBMENU","maybeRenderPopover","label","MENU_ITEM_LABEL","autoFocus","captureDismiss","enforceFocus","hoverCloseDelay","interactionKind","HOVER","modifiers","SUBMENU_POPOVER_MODIFIERS","position","RIGHT_TOP","usePortal","content","minimal","popoverClassName","flip","boundariesElement","padding","offset","preventOverflow","href","onClick","onMouseDown","onMouseEnter","onMouseLeave"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/menu/menuItem.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { Modifiers } from \"popper.js\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, Position } from \"../../common\";\nimport { ActionProps, DISPLAYNAME_PREFIX, LinkProps } from \"../../common/props\";\nimport { Icon } from \"../icon/icon\";\nimport { IPopoverProps, Popover, PopoverInteractionKind } from \"../popover/popover\";\nimport { Text } from \"../text/text\";\nimport { Menu, MenuProps } from \"./menu\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type MenuItemProps = IMenuItemProps;\n/** @deprecated use MenuItemProps */\nexport interface IMenuItemProps extends ActionProps, LinkProps {\n    /** Item text, required for usability. */\n    text: React.ReactNode;\n\n    /**\n     * Whether this item should render with an active appearance.\n     * This is the same styling as the `:active` CSS element state.\n     *\n     * Note: in Blueprint 3.x, this prop was conflated with a \"selected\" appearance\n     * when `intent` was undefined. For legacy purposes, we emulate this behavior in\n     * Blueprint 4.x, so setting `active={true} intent={undefined}` is the same as\n     * `selected={true}`. This prop will be removed in a future major version.\n     *\n     * @deprecated use `selected` prop\n     */\n    active?: boolean;\n\n    /**\n     * Children of this component will be rendered in a __submenu__ that appears when hovering or\n     * clicking on this menu item.\n     *\n     * Use `text` prop for the content of the menu item itself.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether this menu item is non-interactive. Enabling this prop will ignore `href`, `tabIndex`,\n     * and mouse event handlers (in particular click, down, enter, leave).\n     */\n    disabled?: boolean;\n\n    /**\n     * Right-aligned label text content, useful for displaying hotkeys.\n     *\n     * This prop actually supports JSX elements, but TypeScript will throw an error because\n     * `HTMLAttributes` only allows strings. Use `labelElement` to supply a JSX element in TypeScript.\n     */\n    label?: string;\n\n    /**\n     * A space-delimited list of class names to pass along to the right-aligned label wrapper element.\n     */\n    labelClassName?: string;\n\n    /**\n     * Right-aligned label content, useful for displaying hotkeys.\n     */\n    labelElement?: React.ReactNode;\n\n    /**\n     * Whether the text should be allowed to wrap to multiple lines.\n     * If `false`, text will be truncated with an ellipsis when it reaches `max-width`.\n     *\n     * @default false\n     */\n    multiline?: boolean;\n\n    /**\n     * Props to spread to `Popover`. Note that `content` and `minimal` cannot be\n     * changed and `usePortal` defaults to `false` so all submenus will live in\n     * the same container.\n     */\n    popoverProps?: Partial<IPopoverProps>;\n\n    /**\n     * Whether this item should appear selected.\n     */\n    selected?: boolean;\n\n    /**\n     * Whether an enabled item without a submenu should automatically close its parent popover when clicked.\n     *\n     * @default true\n     */\n    shouldDismissPopover?: boolean;\n\n    /**\n     * Props to spread to the child `Menu` component if this item has a submenu.\n     */\n    submenuProps?: Partial<MenuProps>;\n\n    /**\n     * Name of the HTML tag that wraps the MenuItem.\n     *\n     * @default \"a\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * A space-delimited list of class names to pass along to the text wrapper element.\n     */\n    textClassName?: string;\n\n    /**\n     * HTML title to be passed to the <Text> component\n     */\n    htmlTitle?: string;\n}\n\nexport class MenuItem extends AbstractPureComponent2<MenuItemProps & React.AnchorHTMLAttributes<HTMLAnchorElement>> {\n    public static defaultProps: MenuItemProps = {\n        active: false,\n        disabled: false,\n        multiline: false,\n        popoverProps: {},\n        selected: false,\n        shouldDismissPopover: true,\n        text: \"\",\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.MenuItem`;\n\n    public render() {\n        const {\n            // eslint-disable-next-line deprecation/deprecation\n            active,\n            className,\n            children,\n            disabled,\n            icon,\n            intent,\n            labelClassName,\n            labelElement,\n            multiline,\n            popoverProps,\n            selected,\n            shouldDismissPopover,\n            submenuProps,\n            text,\n            textClassName,\n            tagName = \"a\",\n            htmlTitle,\n            ...htmlProps\n        } = this.props;\n\n        const hasIcon = icon != null;\n        const hasSubmenu = children != null;\n\n        const intentClass = Classes.intentClass(intent);\n        const anchorClasses = classNames(\n            Classes.MENU_ITEM,\n            intentClass,\n            {\n                [Classes.ACTIVE]: active,\n                [Classes.DISABLED]: disabled,\n                // prevent popover from closing when clicking on submenu trigger or disabled item\n                [Classes.POPOVER_DISMISS]: shouldDismissPopover && !disabled && !hasSubmenu,\n                [Classes.SELECTED]: selected || (active && intentClass === undefined),\n            },\n            className,\n        );\n\n        const target = React.createElement(\n            tagName,\n            {\n                role: \"menuitem\",\n                tabIndex: 0,\n                ...htmlProps,\n                ...(disabled ? DISABLED_PROPS : {}),\n                className: anchorClasses,\n            },\n            hasIcon ? (\n                // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n                // so that we always render this class\n                <span className={Classes.MENU_ITEM_ICON}>\n                    <Icon icon={icon} aria-hidden={true} tabIndex={-1} />\n                </span>\n            ) : undefined,\n            <Text className={classNames(Classes.FILL, textClassName)} ellipsize={!multiline} title={htmlTitle}>\n                {text}\n            </Text>,\n            this.maybeRenderLabel(labelElement),\n            hasSubmenu ? (\n                <Icon className={Classes.MENU_SUBMENU_ICON} title=\"Open sub menu\" icon=\"caret-right\" />\n            ) : undefined,\n        );\n\n        const liClasses = classNames({ [Classes.MENU_SUBMENU]: hasSubmenu });\n        return (\n            <li className={liClasses} role=\"none\">\n                {this.maybeRenderPopover(target, children)}\n            </li>\n        );\n    }\n\n    private maybeRenderLabel(labelElement?: React.ReactNode) {\n        const { label, labelClassName } = this.props;\n        if (label == null && labelElement == null) {\n            return null;\n        }\n        return (\n            <span className={classNames(Classes.MENU_ITEM_LABEL, labelClassName)}>\n                {label}\n                {labelElement}\n            </span>\n        );\n    }\n\n    private maybeRenderPopover(target: JSX.Element, children?: React.ReactNode) {\n        if (children == null) {\n            return target;\n        }\n        const { disabled, popoverProps, submenuProps } = this.props;\n        return (\n            /* eslint-disable-next-line deprecation/deprecation */\n            <Popover\n                autoFocus={false}\n                captureDismiss={false}\n                disabled={disabled}\n                enforceFocus={false}\n                hoverCloseDelay={0}\n                interactionKind={PopoverInteractionKind.HOVER}\n                modifiers={SUBMENU_POPOVER_MODIFIERS}\n                position={Position.RIGHT_TOP}\n                usePortal={false}\n                {...popoverProps}\n                content={<Menu {...submenuProps}>{children}</Menu>}\n                minimal={true}\n                popoverClassName={classNames(Classes.MENU_SUBMENU, popoverProps?.popoverClassName)}\n                target={target}\n            />\n        );\n    }\n}\n\nconst SUBMENU_POPOVER_MODIFIERS: Modifiers = {\n    // 20px padding - scrollbar width + a bit\n    flip: { boundariesElement: \"viewport\", padding: 20 },\n    // shift popover up 5px so MenuItems align\n    offset: { offset: -5 },\n    preventOverflow: { boundariesElement: \"viewport\", padding: 20 },\n};\n\n// props to ignore when disabled\nconst DISABLED_PROPS: React.AnchorHTMLAttributes<HTMLAnchorElement> = {\n    href: undefined,\n    onClick: undefined,\n    onMouseDown: undefined,\n    onMouseEnter: undefined,\n    onMouseLeave: undefined,\n    tabIndex: -1,\n};\n"]},"metadata":{},"sourceType":"module"}