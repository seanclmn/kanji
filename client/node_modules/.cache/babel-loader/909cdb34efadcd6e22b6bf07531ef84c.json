{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getPosition(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\n\nexport function isVerticalPosition(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\n\nexport function getOppositePosition(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n\n    case \"left\":\n      return \"right\";\n\n    case \"bottom\":\n      return \"top\";\n\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\n\nexport function getAlignment(placement) {\n  var align = placement.split(\"-\")[1];\n\n  switch (align) {\n    case \"start\":\n      return \"left\";\n\n    case \"end\":\n      return \"right\";\n\n    default:\n      return \"center\";\n  }\n} // Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\n\nexport function getTransformOrigin(data) {\n  var position = getPosition(data.placement);\n\n  if (data.arrowElement == null) {\n    return isVerticalPosition(position) ? \"\".concat(getOppositePosition(position), \" \").concat(getAlignment(position)) : \"\".concat(getAlignment(position), \" \").concat(getOppositePosition(position));\n  } else {\n    var arrowSizeShift = data.arrowElement.clientHeight / 2;\n    var arrow = data.offsets.arrow; // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n\n    return isVerticalPosition(position) ? \"\".concat(getOppositePosition(position), \" \").concat(arrow.top + arrowSizeShift, \"px\") : \"\".concat(arrow.left + arrowSizeShift, \"px \").concat(getOppositePosition(position));\n  }\n} // additional space between arrow and edge of target\n\nvar ARROW_SPACING = 4;\n/** Popper modifier that offsets popper and arrow so arrow points out of the correct side */\n\nexport var arrowOffsetModifier = function (data) {\n  if (data.arrowElement == null) {\n    return data;\n  } // our arrows have equal width and height\n\n\n  var arrowSize = data.arrowElement.clientWidth; // this logic borrowed from original Popper arrow modifier itself\n\n  var position = getPosition(data.placement);\n  var isVertical = isVerticalPosition(position);\n  var len = isVertical ? \"width\" : \"height\";\n  var offsetSide = isVertical ? \"left\" : \"top\";\n  var arrowOffsetSize = Math.round(arrowSize / 2 / Math.sqrt(2)); // offset popover by arrow size, offset arrow in the opposite direction\n\n  if (position === \"top\" || position === \"left\") {\n    // the \"up & back\" directions require negative popper offsets\n    data.offsets.popper[offsetSide] -= arrowOffsetSize + ARROW_SPACING; // can only use left/top on arrow so gotta get clever with 100% + X\n\n    data.offsets.arrow[offsetSide] = data.offsets.popper[len] - arrowSize + arrowOffsetSize;\n  } else {\n    data.offsets.popper[offsetSide] += arrowOffsetSize + ARROW_SPACING;\n    data.offsets.arrow[offsetSide] = -arrowOffsetSize;\n  }\n\n  return data;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;AACA,OAAM,SAAUA,WAAV,CAAsBC,SAAtB,EAAmD;EACrD,OAAOA,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACH;AAED;;AACA,OAAM,SAAUC,kBAAV,CAA6BC,IAA7B,EAAoD;EACtD,OAAO,CAAC,MAAD,EAAS,OAAT,EAAkBC,OAAlB,CAA0BD,IAA1B,MAAoC,CAAC,CAA5C;AACH;AAED;;AACA,OAAM,SAAUE,mBAAV,CAA8BF,IAA9B,EAAqD;EACvD,QAAQA,IAAR;IACI,KAAK,KAAL;MACI,OAAO,QAAP;;IACJ,KAAK,MAAL;MACI,OAAO,OAAP;;IACJ,KAAK,QAAL;MACI,OAAO,KAAP;;IACJ;MACI,OAAO,MAAP;EARR;AAUH;AAED;;AACA,OAAM,SAAUG,YAAV,CAAuBN,SAAvB,EAAoD;EACtD,IAAMO,KAAK,GAAGP,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAd;;EACA,QAAQM,KAAR;IACI,KAAK,OAAL;MACI,OAAO,MAAP;;IACJ,KAAK,KAAL;MACI,OAAO,OAAP;;IACJ;MACI,OAAO,QAAP;EANR;AAQH,C,CAED;AACA;;AAEA;;AACA,OAAM,SAAUC,kBAAV,CAA6BC,IAA7B,EAAgD;EAClD,IAAMC,QAAQ,GAAGX,WAAW,CAACU,IAAI,CAACT,SAAN,CAA5B;;EACA,IAAIS,IAAI,CAACE,YAAL,IAAqB,IAAzB,EAA+B;IAC3B,OAAOT,kBAAkB,CAACQ,QAAD,CAAlB,GACD,UAAGL,mBAAmB,CAACK,QAAD,CAAtB,EAAgC,GAAhC,EAAgCE,MAAhC,CAAoCN,YAAY,CAACI,QAAD,CAAhD,CADC,GAED,UAAGJ,YAAY,CAACI,QAAD,CAAf,EAAyB,GAAzB,EAAyBE,MAAzB,CAA6BP,mBAAmB,CAACK,QAAD,CAAhD,CAFN;EAGH,CAJD,MAIO;IACH,IAAMG,cAAc,GAAGJ,IAAI,CAACE,YAAL,CAAkBG,YAAlB,GAAiC,CAAxD;IACQ,SAAK,GAAKL,IAAI,CAACM,OAAL,CAAYC,KAAtB,CAFL,CAGH;IACA;;IACA,OAAOd,kBAAkB,CAACQ,QAAD,CAAlB,GACD,UAAGL,mBAAmB,CAACK,QAAD,CAAtB,EAAgC,GAAhC,EAAgCE,MAAhC,CAAoCI,KAAK,CAACC,GAAN,GAAYJ,cAAhD,EAA8D,IAA9D,CADC,GAED,UAAGG,KAAK,CAACE,IAAN,GAAaL,cAAhB,EAA8B,KAA9B,EAA8BD,MAA9B,CAAoCP,mBAAmB,CAACK,QAAD,CAAvD,CAFN;EAGH;AACJ,C,CAED;;AACA,IAAMS,aAAa,GAAG,CAAtB;AAEA;;AACA,OAAO,IAAMC,mBAAmB,GAAwB,gBAAI;EACxD,IAAIX,IAAI,CAACE,YAAL,IAAqB,IAAzB,EAA+B;IAC3B,OAAOF,IAAP;EACH,CAHuD,CAIxD;;;EACA,IAAMY,SAAS,GAAGZ,IAAI,CAACE,YAAL,CAAkBW,WAApC,CALwD,CAMxD;;EACA,IAAMZ,QAAQ,GAAGX,WAAW,CAACU,IAAI,CAACT,SAAN,CAA5B;EACA,IAAMuB,UAAU,GAAGrB,kBAAkB,CAACQ,QAAD,CAArC;EACA,IAAMc,GAAG,GAAGD,UAAU,GAAG,OAAH,GAAa,QAAnC;EACA,IAAME,UAAU,GAAGF,UAAU,GAAG,MAAH,GAAY,KAAzC;EAEA,IAAMG,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWP,SAAS,GAAG,CAAZ,GAAgBM,IAAI,CAACE,IAAL,CAAU,CAAV,CAA3B,CAAxB,CAZwD,CAaxD;;EACA,IAAInB,QAAQ,KAAK,KAAb,IAAsBA,QAAQ,KAAK,MAAvC,EAA+C;IAC3C;IACAD,IAAI,CAACM,OAAL,CAAae,MAAb,CAAoBL,UAApB,KAAmCC,eAAe,GAAGP,aAArD,CAF2C,CAG3C;;IACAV,IAAI,CAACM,OAAL,CAAaC,KAAb,CAAmBS,UAAnB,IAAiChB,IAAI,CAACM,OAAL,CAAae,MAAb,CAAoBN,GAApB,IAA2BH,SAA3B,GAAuCK,eAAxE;EACH,CALD,MAKO;IACHjB,IAAI,CAACM,OAAL,CAAae,MAAb,CAAoBL,UAApB,KAAmCC,eAAe,GAAGP,aAArD;IACAV,IAAI,CAACM,OAAL,CAAaC,KAAb,CAAmBS,UAAnB,IAAiC,CAACC,eAAlC;EACH;;EACD,OAAOjB,IAAP;AACH,CAxBM","names":["getPosition","placement","split","isVerticalPosition","side","indexOf","getOppositePosition","getAlignment","align","getTransformOrigin","data","position","arrowElement","concat","arrowSizeShift","clientHeight","offsets","arrow","top","left","ARROW_SPACING","arrowOffsetModifier","arrowSize","clientWidth","isVertical","len","offsetSide","arrowOffsetSize","Math","round","sqrt","popper"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/popover/popperUtils.ts"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport PopperJS from \"popper.js\";\n\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getPosition(placement: PopperJS.Placement) {\n    return placement.split(\"-\")[0] as PopperJS.Position;\n}\n\n/** Returns true if position is left or right. */\nexport function isVerticalPosition(side: PopperJS.Position) {\n    return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n\n/** Returns the opposite position. */\nexport function getOppositePosition(side: PopperJS.Position) {\n    switch (side) {\n        case \"top\":\n            return \"bottom\";\n        case \"left\":\n            return \"right\";\n        case \"bottom\":\n            return \"top\";\n        default:\n            return \"left\";\n    }\n}\n\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement: PopperJS.Placement) {\n    const align = placement.split(\"-\")[1] as \"start\" | \"end\" | undefined;\n    switch (align) {\n        case \"start\":\n            return \"left\";\n        case \"end\":\n            return \"right\";\n        default:\n            return \"center\";\n    }\n}\n\n// Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(data: PopperJS.Data) {\n    const position = getPosition(data.placement);\n    if (data.arrowElement == null) {\n        return isVerticalPosition(position)\n            ? `${getOppositePosition(position)} ${getAlignment(position)}`\n            : `${getAlignment(position)} ${getOppositePosition(position)}`;\n    } else {\n        const arrowSizeShift = data.arrowElement.clientHeight / 2;\n        const { arrow } = data.offsets;\n        // can use keyword for dimension without the arrow, to ease computation burden.\n        // move origin by half arrow's height to keep it centered.\n        return isVerticalPosition(position)\n            ? `${getOppositePosition(position)} ${arrow.top + arrowSizeShift}px`\n            : `${arrow.left + arrowSizeShift}px ${getOppositePosition(position)}`;\n    }\n}\n\n// additional space between arrow and edge of target\nconst ARROW_SPACING = 4;\n\n/** Popper modifier that offsets popper and arrow so arrow points out of the correct side */\nexport const arrowOffsetModifier: PopperJS.ModifierFn = data => {\n    if (data.arrowElement == null) {\n        return data;\n    }\n    // our arrows have equal width and height\n    const arrowSize = data.arrowElement.clientWidth;\n    // this logic borrowed from original Popper arrow modifier itself\n    const position = getPosition(data.placement);\n    const isVertical = isVerticalPosition(position);\n    const len = isVertical ? \"width\" : \"height\";\n    const offsetSide = isVertical ? \"left\" : \"top\";\n\n    const arrowOffsetSize = Math.round(arrowSize / 2 / Math.sqrt(2));\n    // offset popover by arrow size, offset arrow in the opposite direction\n    if (position === \"top\" || position === \"left\") {\n        // the \"up & back\" directions require negative popper offsets\n        data.offsets.popper[offsetSide] -= arrowOffsetSize + ARROW_SPACING;\n        // can only use left/top on arrow so gotta get clever with 100% + X\n        data.offsets.arrow[offsetSide] = data.offsets.popper[len] - arrowSize + arrowOffsetSize;\n    } else {\n        data.offsets.popper[offsetSide] += arrowOffsetSize + ARROW_SPACING;\n        data.offsets.arrow[offsetSide] = -arrowOffsetSize;\n    }\n    return data;\n};\n"]},"metadata":{},"sourceType":"module"}