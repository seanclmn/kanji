{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Helper function for formatting ratios as CSS percentage values. */\nexport function formatPercentage(ratio) {\n  return \"\".concat((ratio * 100).toFixed(2), \"%\");\n}\n/**\n * Mutates the values array by filling all the values between start and end index (inclusive) with the fill value.\n */\n\nexport function fillValues(values, startIndex, endIndex, fillValue) {\n  var inc = startIndex < endIndex ? 1 : -1;\n\n  for (var index = startIndex; index !== endIndex + inc; index += inc) {\n    values[index] = fillValue;\n  }\n}\n/**\n * Returns the minimum element of an array as determined by comparing the results of calling the arg function on each\n * element of the array. The function will only be called once per element.\n */\n\nexport function argMin(values, argFn) {\n  if (values.length === 0) {\n    return undefined;\n  }\n\n  var minValue = values[0];\n  var minArg = argFn(minValue);\n\n  for (var index = 1; index < values.length; index++) {\n    var value = values[index];\n    var arg = argFn(value);\n\n    if (arg < minArg) {\n      minValue = value;\n      minArg = arg;\n    }\n  }\n\n  return minValue;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;AACA,OAAM,SAAUA,gBAAV,CAA2BC,KAA3B,EAAwC;EAC1C,OAAO,UAAG,CAACA,KAAK,GAAG,GAAT,EAAcC,OAAd,CAAsB,CAAtB,CAAH,EAA2B,GAA3B,CAAP;AACH;AAED;;;;AAGA,OAAM,SAAUC,UAAV,CAAwBC,MAAxB,EAAqCC,UAArC,EAAyDC,QAAzD,EAA2EC,SAA3E,EAAuF;EACzF,IAAMC,GAAG,GAAGH,UAAU,GAAGC,QAAb,GAAwB,CAAxB,GAA4B,CAAC,CAAzC;;EACA,KAAK,IAAIG,KAAK,GAAGJ,UAAjB,EAA6BI,KAAK,KAAKH,QAAQ,GAAGE,GAAlD,EAAuDC,KAAK,IAAID,GAAhE,EAAqE;IACjEJ,MAAM,CAACK,KAAD,CAAN,GAAgBF,SAAhB;EACH;AACJ;AAED;;;;;AAIA,OAAM,SAAUG,MAAV,CAAoBN,MAApB,EAAiCO,KAAjC,EAAyD;EAC3D,IAAIP,MAAM,CAACQ,MAAP,KAAkB,CAAtB,EAAyB;IACrB,OAAOC,SAAP;EACH;;EAED,IAAIC,QAAQ,GAAGV,MAAM,CAAC,CAAD,CAArB;EACA,IAAIW,MAAM,GAAGJ,KAAK,CAACG,QAAD,CAAlB;;EAEA,KAAK,IAAIL,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,MAAM,CAACQ,MAAnC,EAA2CH,KAAK,EAAhD,EAAoD;IAChD,IAAMO,KAAK,GAAGZ,MAAM,CAACK,KAAD,CAApB;IACA,IAAMQ,GAAG,GAAGN,KAAK,CAACK,KAAD,CAAjB;;IACA,IAAIC,GAAG,GAAGF,MAAV,EAAkB;MACdD,QAAQ,GAAGE,KAAX;MACAD,MAAM,GAAGE,GAAT;IACH;EACJ;;EAED,OAAOH,QAAP;AACH","names":["formatPercentage","ratio","toFixed","fillValues","values","startIndex","endIndex","fillValue","inc","index","argMin","argFn","length","undefined","minValue","minArg","value","arg"],"sources":["/Users/seancoleman/Projects/kanji/node_modules/@blueprintjs/core/src/components/slider/sliderUtils.ts"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Helper function for formatting ratios as CSS percentage values. */\nexport function formatPercentage(ratio: number) {\n    return `${(ratio * 100).toFixed(2)}%`;\n}\n\n/**\n * Mutates the values array by filling all the values between start and end index (inclusive) with the fill value.\n */\nexport function fillValues<T>(values: T[], startIndex: number, endIndex: number, fillValue: T) {\n    const inc = startIndex < endIndex ? 1 : -1;\n    for (let index = startIndex; index !== endIndex + inc; index += inc) {\n        values[index] = fillValue;\n    }\n}\n\n/**\n * Returns the minimum element of an array as determined by comparing the results of calling the arg function on each\n * element of the array. The function will only be called once per element.\n */\nexport function argMin<T>(values: T[], argFn: (value: T) => any): T | undefined {\n    if (values.length === 0) {\n        return undefined;\n    }\n\n    let minValue = values[0];\n    let minArg = argFn(minValue);\n\n    for (let index = 1; index < values.length; index++) {\n        const value = values[index];\n        const arg = argFn(value);\n        if (arg < minArg) {\n            minValue = value;\n            minArg = arg;\n        }\n    }\n\n    return minValue;\n}\n"]},"metadata":{},"sourceType":"module"}